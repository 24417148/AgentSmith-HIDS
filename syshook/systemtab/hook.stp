%{
#include <linux/socket.h>
#include <linux/un.h>
#include <net/sock.h>

#define BigLittleSwap16(A) ((((int)(A)&0xff00) >> 8) | \
                            (((int)(A)&0x10ff) << 8))

#define NIPQUAD(addr) \
    ((unsigned char *)&addr)[0], \
    ((unsigned char *)&addr)[1], \
    ((unsigned char *)&addr)[2], \
    ((unsigned char *)&addr)[3]

#define NIP6(addr) \
    ntohs((addr).s6_addr16[0]), \
    ntohs((addr).s6_addr16[1]), \
    ntohs((addr).s6_addr16[2]), \
    ntohs((addr).s6_addr16[3]), \
    ntohs((addr).s6_addr16[4]), \
    ntohs((addr).s6_addr16[5]), \
    ntohs((addr).s6_addr16[6]), \
    ntohs((addr).s6_addr16[7])

int checkCPUendian(void)
{
    union {
        unsigned long int i;
        unsigned char s[4];
    } c;
    c.i = 0x12345678;
    return (0x12 == c.s[0]);
}

unsigned short int Ntohs(unsigned short int n)
{
    return checkCPUendian() ? n : BigLittleSwap16(n);
}
%}

function get_sockaddr_ip_port:string (sock:long) %{
    struct sockaddr_in *sin = (struct sockaddr_in *)((long)STAP_ARG_sock);
	snprintf(STAP_RETVALUE, 72,"%d.%d.%d.%d|%d",NIPQUAD(sin->sin_addr), Ntohs(sin->sin_port));
%}

function get_sockaddr6_ip_port:string (sock:long) %{
    struct sockaddr_in6 *sin  = (struct sockaddr_in6 *)((long)STAP_ARG_sock);
	snprintf(STAP_RETVALUE, 72,"%d:%d:%d:%d:%d:%d:%d:%d|%d",NIP6(sin->sin6_addr), Ntohs(sin->sin6_port));
%}

function get_socket_ip_port:string (sock:long) %{
	struct socket *sock = (struct socket *)((long)STAP_ARG_sock);
	struct sockaddr_in source_addr;
	int err, len;

	err = kernel_getsockname(kread(&sock), (struct sockaddr *)(&source_addr), &len);
	if (!err) {
		snprintf(STAP_RETVALUE, 72,"%d.%d.%d.%d|%d",NIPQUAD(source_addr.sin_addr), Ntohs(source_addr.sin_port));
	} else {
		snprintf(STAP_RETVALUE, 8,"-1|-1");
	}
%}

function get_socket6_ip_port:string (sock:long) %{
	struct socket *sock = (struct socket *)((long)STAP_ARG_sock);
	struct sockaddr_in6 source_addr;
	int err, len;

	err = kernel_getsockname(kread(&sock), (struct sockaddr *)(&source_addr), &len);
	if (!err) {
		snprintf(STAP_RETVALUE, 72,"%d:%d:%d:%d:%d:%d:%d:%d|%d",NIP6(source_addr.sin6_addr), Ntohs(source_addr.sin6_port));
	} else {
		snprintf(STAP_RETVALUE, 8,"-1|-1");
	}
%}

function sockfd_lookup:long(file) %{
	int err = 0;
	STAP_RETURN((struct socket *) sockfd_lookup(STAP_ARG_file, &err));
%}

function sockfd_put(socket) %{
	sockfd_put(((struct socket *) STAP_ARG_socket));
%}

function get_node_name:string() %{
   strlcpy(STAP_RETVALUE, current->nsproxy->uts_ns->name.nodename, strlen(current->nsproxy->uts_ns->name.nodename) + 1);
%}

probe kernel.function("sys_execve").return {
    file = current_exe_file()
    current = task_current()
    node_name = get_node_name()
    cmd = str_replace(cmdline_str(),"\n"," ")
    pexecname = task_execname(task_parent(current))
    printf("execve %s %s %6d %6d %6d %6d %s %s\n",node_name, fullpath_struct_file(current, file), uid(), pid(), ppid(), gid(), cmd, pexecname)
}

probe __syscall.connect.return {
    if ($return != 0) {
        sa_family = @cast($uservaddr, "sockaddr") -> sa_family
        if (sa_family == 2) {
            sock = sockfd_lookup($fd)
            if (sock != NULL) {
                dip_port = get_sockaddr_ip_port($uservaddr)
                sip_port = get_socket_ip_port(sock);
                file = current_exe_file()
                current = task_current()
                node_name = get_node_name()
                cmd = str_replace(cmdline_str(),"\n"," ")
                pexecname = task_execname(task_parent(current))
                printf("connect %s %s %6d %6d %6d %6d %s %s %s %s\n", node_name, fullpath_struct_file(current, file), uid(), pid(), ppid(), gid(), cmd, pexecname, sip_port, dip_port)
                sockfd_put(sock)
            }
        } else if (sa_family == 10) {
            sock = sockfd_lookup($fd)
            if (sock != NULL) {
                dip_port = get_sockaddr6_ip_port($uservaddr)
                sip_port = get_socket6_ip_port(sock);
                file = current_exe_file()
                current = task_current()
                node_name = get_node_name()
                cmd = str_replace(cmdline_str(),"\n"," ")
                pexecname = task_execname(task_parent(current))
                printf("connect %s %s %6d %6d %6d %6d %s %s %s %s\n", node_name, fullpath_struct_file(current, file), uid(), pid(), ppid(), gid(), cmd, pexecname, sip_port, dip_port)
            }
        }
    }
}

probe kernel.function("sys_accept").return {
    file = current_exe_file()
    current = task_current()
    node_name = get_node_name()
    cmd = str_replace(cmdline_str(),"\n"," ")
    pexecname = task_execname(task_parent(current))
    printf("accept %s %s %6d %6d %6d %6d %s %s\n", node_name, fullpath_struct_file(current, file), uid(), pid(), ppid(), gid(), cmd, pexecname)
}

probe kernel.{function("vfs_create"), function("vfs_mknod")}.return {
    if ($return == 0) {
        file = current_exe_file()
        current = task_current()
        node_name = get_node_name()
        cmd = str_replace(cmdline_str(),"\n"," ")
        create_file_path = sprintf("%s/%s", inode_path($dir), d_name($dentry))
        pexecname = task_execname(task_parent(current))
        printf("vfs_create %s %s %s %6d %6d %6d %6d %s %s\n", node_name, fullpath_struct_file(current, file), create_file_path , uid(), pid(), ppid(), gid(), cmd, pexecname)
    }
}

probe kernel.function("sys_ptrace").return {
    if ($request == 4 || $request == 5) {
        file = current_exe_file()
        current = task_current()
        node_name = get_node_name()
        cmd = str_replace(cmdline_str(),"\n"," ")
        pexecname = task_execname(task_parent(current))
        printf("ptrace %s %s %6d %6d %6d %6d %6d %s %s\n", node_name, fullpath_struct_file(current, file), $pid, uid(), pid(), ppid(), gid(), cmd, pexecname)
    }
}

probe kernel.function("load_module").return {
    file = current_exe_file()
    current = task_current()
    node_name = get_node_name()
    cmd = str_replace(cmdline_str(),"\n"," ")
    pexecname = task_execname(task_parent(current))
    printf("load_module %s %s %6d %6d %6d %6d %s %s\n", node_name, fullpath_struct_file(current, file), uid(), pid(), ppid(), gid(), cmd, pexecname)
}

probe kernel.function("sys_recvfrom").return {
    file = current_exe_file()
    current = task_current()
    node_name = get_node_name()
    cmd = str_replace(cmdline_str(),"\n"," ")
    pexecname = task_execname(task_parent(current))
    printf("recvfrom %s %s %6d %6d %6d %6d %s %s\n", node_name, fullpath_struct_file(current, file), uid(), pid(), ppid(), gid(), cmd, pexecname)
}