function get_node_name:string() %{
   strlcpy(STAP_RETVALUE, current->nsproxy->uts_ns->name.nodename, strlen(current->nsproxy->uts_ns->name.nodename) + 1);
%}

probe kernel.function("sys_execve").return {
    file = current_exe_file()
    current = task_current()
    node_name = get_node_name()
    cmd = str_replace(cmdline_str(),"\n"," ")
    pexecname = task_execname(task_parent(current))
    printf("execve %s %s %6d %6d %6d %6d %s %s\n",node_name, fullpath_struct_file(current, file), uid(), pid(), ppid(), gid(), cmd, pexecname)
}

probe kernel.function("sys_connect").return {
    file = current_exe_file()
    current = task_current()
    node_name = get_node_name()
    cmd = str_replace(cmdline_str(),"\n"," ")
    pexecname = task_execname(task_parent(current))
    printf("connect %s %s %6d %6d %6d %6d %s %s\n", node_name, fullpath_struct_file(current, file), uid(), pid(), ppid(), gid(), cmd, pexecname)
}

probe kernel.function("sys_accept").return {
    file = current_exe_file()
    current = task_current()
    node_name = get_node_name()
    cmd = str_replace(cmdline_str(),"\n"," ")
    pexecname = task_execname(task_parent(current))
    printf("accept %s %s %6d %6d %6d %6d %s %s\n", node_name, fullpath_struct_file(current, file), uid(), pid(), ppid(), gid(), cmd, pexecname)
}

probe kernel.{function("vfs_create"), function("vfs_mknod")}.return? {
    fd = $return
    if (fd == 0) {
        file = current_exe_file()
        current = task_current()
        node_name = get_node_name()
        cmd = str_replace(cmdline_str(),"\n"," ")
        create_file_path = sprintf("%s/%s", inode_path($dir), d_name($dentry))
        pexecname = task_execname(task_parent(current))
        printf("vfs_create %s %s %s %6d %6d %6d %6d %s %s\n", node_name, fullpath_struct_file(current, file), create_file_path , uid(), pid(), ppid(), gid(), cmd, pexecname)
    }
}

probe kernel.function("sys_ptrace").return {
    if ($request == 4 || $request == 5) {
        file = current_exe_file()
        current = task_current()
        node_name = get_node_name()
        cmd = str_replace(cmdline_str(),"\n"," ")
        pexecname = task_execname(task_parent(current))
        printf("ptrace %s %s %6d %6d %6d %6d %6d %s %s\n", node_name, fullpath_struct_file(current, file), $pid, uid(), pid(), ppid(), gid(), cmd, pexecname)
    }
}

probe kernel.function("load_module").return {
    file = current_exe_file()
    current = task_current()
    node_name = get_node_name()
    cmd = str_replace(cmdline_str(),"\n"," ")
    pexecname = task_execname(task_parent(current))
    printf("load_module %s %s %6d %6d %6d %6d %s %s\n", node_name, fullpath_struct_file(current, file), uid(), pid(), ppid(), gid(), cmd, pexecname)
}

probe kernel.function("sys_recvfrom").return {
    file = current_exe_file()
    current = task_current()
    node_name = get_node_name()
    cmd = str_replace(cmdline_str(),"\n"," ")
    pexecname = task_execname(task_parent(current))
    printf("recvfrom %s %s %6d %6d %6d %6d %s %s\n", node_name, fullpath_struct_file(current, file), uid(), pid(), ppid(), gid(), cmd, pexecname)
}