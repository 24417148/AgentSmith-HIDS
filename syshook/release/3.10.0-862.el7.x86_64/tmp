
syshook.ko：     文件格式 elf64-x86-64


Disassembly of section .text:

0000000000000000 <enable_write_protection>:
    return ktime_to_ns(ktime_sub(ktime_get(), starttime));
}

static void enable_write_protection(void)
{
    unsigned long cr0 = read_cr0();
       0:	e8 00 00 00 00       	callq  5 <enable_write_protection+0x5>
       5:	55                   	push   %rbp
       6:	48 89 e5             	mov    %rsp,%rbp
       9:	48 83 ec 10          	sub    $0x10,%rsp
       d:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
      14:	00 00 
      16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      1a:	31 c0                	xor    %eax,%eax
      1c:	ff 14 25 00 00 00 00 	callq  *0x0
      23:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      27:	f0 80 4d f2 01       	lock orb $0x1,-0xe(%rbp)
      2c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
      30:	ff 14 25 00 00 00 00 	callq  *0x0
      37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      3b:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
      42:	00 00 
      44:	75 02                	jne    48 <enable_write_protection+0x48>
      46:	c9                   	leaveq 
      47:	c3                   	retq   
      48:	e8 00 00 00 00       	callq  4d <enable_write_protection+0x4d>
      4d:	0f 1f 00             	nopl   (%rax)

0000000000000050 <disable_write_protection>:
      50:	e8 00 00 00 00       	callq  55 <disable_write_protection+0x5>
    set_bit(16, &cr0);
      55:	55                   	push   %rbp
      56:	48 89 e5             	mov    %rsp,%rbp
      59:	48 83 ec 10          	sub    $0x10,%rsp
      5d:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
      64:	00 00 
      66:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    write_cr0(cr0);
}

      6a:	31 c0                	xor    %eax,%eax
      6c:	ff 14 25 00 00 00 00 	callq  *0x0
      73:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      77:	f0 80 65 f2 fe       	lock andb $0xfe,-0xe(%rbp)
      7c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
static void disable_write_protection(void)
{
    unsigned long cr0 = read_cr0();
      80:	ff 14 25 00 00 00 00 	callq  *0x0
      87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      8b:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
      92:	00 00 
      94:	75 02                	jne    98 <disable_write_protection+0x48>
      96:	c9                   	leaveq 
      97:	c3                   	retq   
      98:	e8 00 00 00 00       	callq  9d <disable_write_protection+0x4d>
      9d:	0f 1f 00             	nopl   (%rax)

00000000000000a0 <del_use_count>:
      a0:	e8 00 00 00 00       	callq  a5 <del_use_count+0x5>
    clear_bit(16, &cr0);
      a5:	55                   	push   %rbp
      a6:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
      ad:	48 89 e5             	mov    %rsp,%rbp
      b0:	e8 00 00 00 00       	callq  b5 <del_use_count+0x15>
      b5:	83 2d 00 00 00 00 01 	subl   $0x1,0x0(%rip)        # bc <del_use_count+0x1c>
    write_cr0(cr0);
}

      bc:	75 0b                	jne    c9 <del_use_count+0x29>
      be:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # c5 <del_use_count+0x25>
      c5:	65 48 ff 08          	decq   %gs:(%rax)
      c9:	f0 ff 05 00 00 00 00 	lock incl 0x0(%rip)        # d0 <del_use_count+0x30>
{
    write_use_count_lock();
    use_count = use_count - 1;

    if (use_count == 0)
    {
      d0:	5d                   	pop    %rbp
      d1:	c3                   	retq   
      d2:	0f 1f 40 00          	nopl   0x0(%rax)
}
      d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
      dd:	00 00 00 

00000000000000e0 <sockfd_lookup_light>:
      e0:	e8 00 00 00 00       	callq  e5 <sockfd_lookup_light+0x5>
        preempt_disable();
        __this_cpu_dec(THIS_MODULE->refptr->incs);
        preempt_enable();
    }
      e5:	55                   	push   %rbp
      e6:	48 89 e5             	mov    %rsp,%rbp
      e9:	41 55                	push   %r13
      eb:	49 89 d5             	mov    %rdx,%r13

    write_use_count_unlock();
}
      ee:	41 54                	push   %r12
      f0:	53                   	push   %rbx
      f1:	48 89 f3             	mov    %rsi,%rbx
      f4:	48 83 ec 08          	sub    $0x8,%rsp
      f8:	c7 06 f7 ff ff ff    	movl   $0xfffffff7,(%rsi)
      fe:	48 89 d6             	mov    %rdx,%rsi

static struct socket *sockfd_lookup_light(int fd, int *err, int *fput_needed)
{
    struct file *file;
    struct socket *sock;
     101:	e8 00 00 00 00       	callq  106 <sockfd_lookup_light+0x26>
     106:	48 85 c0             	test   %rax,%rax
     109:	49 89 c4             	mov    %rax,%r12
     10c:	74 2a                	je     138 <sockfd_lookup_light+0x58>
     10e:	48 89 de             	mov    %rbx,%rsi

    *err = -EBADF;
    file = fget_light(fd, fput_needed);
     111:	48 89 c7             	mov    %rax,%rdi
     114:	e8 00 00 00 00       	callq  119 <sockfd_lookup_light+0x39>
     119:	48 85 c0             	test   %rax,%rax
     11c:	74 12                	je     130 <sockfd_lookup_light+0x50>
     11e:	48 83 c4 08          	add    $0x8,%rsp
     122:	5b                   	pop    %rbx
     123:	41 5c                	pop    %r12
     125:	41 5d                	pop    %r13
     127:	5d                   	pop    %rbp
    if (file)
    {
        sock = sock_from_file(file, err);
        if (sock)
     128:	c3                   	retq   
     129:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            return sock;
     130:	41 8b 55 00          	mov    0x0(%r13),%edx
     134:	85 d2                	test   %edx,%edx
        fput_light(file, *fput_needed);
     136:	75 10                	jne    148 <sockfd_lookup_light+0x68>
     138:	48 83 c4 08          	add    $0x8,%rsp
     13c:	31 c0                	xor    %eax,%eax
    }
    return NULL;
     13e:	5b                   	pop    %rbx
     13f:	41 5c                	pop    %r12
     141:	41 5d                	pop    %r13
     143:	5d                   	pop    %rbp
     144:	c3                   	retq   
     145:	0f 1f 00             	nopl   (%rax)
     148:	4c 89 e7             	mov    %r12,%rdi
}
     14b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

static int device_mmap(struct file *filp, struct vm_area_struct *vma)
{
    int ret = 0;
    struct page *page = NULL;
     14f:	e8 00 00 00 00       	callq  154 <sockfd_lookup_light+0x74>
     154:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     158:	eb c4                	jmp    11e <sockfd_lookup_light+0x3e>
     15a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000000160 <device_close>:
     160:	e8 00 00 00 00       	callq  165 <device_close+0x5>
     165:	55                   	push   %rbp
     166:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    int ret = 0;
     16d:	48 89 e5             	mov    %rsp,%rbp
    struct page *page = NULL;
     170:	e8 00 00 00 00       	callq  175 <device_close+0x15>
     175:	31 c0                	xor    %eax,%eax
     177:	c7 05 00 00 00 00 ff 	movl   $0xffffffff,0x0(%rip)        # 181 <device_close+0x21>
     17e:	ff ff ff 
     181:	5d                   	pop    %rbp
     182:	c3                   	retq   
     183:	0f 1f 00             	nopl   (%rax)
     186:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
     18d:	00 00 00 

0000000000000190 <device_open>:
{
    mutex_unlock(&mchar_mutex);
    share_mem_flag = -1;
    return 0;
}

     190:	e8 00 00 00 00       	callq  195 <device_open+0x5>
     195:	55                   	push   %rbp
static const struct file_operations mchar_fops = {
     196:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi

     19d:	48 89 e5             	mov    %rsp,%rbp
static const struct file_operations mchar_fops = {
     1a0:	41 54                	push   %r12
     1a2:	53                   	push   %rbx
     1a3:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
    .owner = THIS_MODULE,
     1a8:	e8 00 00 00 00       	callq  1ad <device_open+0x1d>
     1ad:	85 c0                	test   %eax,%eax
     1af:	74 56                	je     207 <device_open+0x77>
    .open = device_open,
    .release = device_close,
     1b1:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
     1b8:	c7 05 00 00 00 00 01 	movl   $0x1,0x0(%rip)        # 1c2 <device_open+0x32>
     1bf:	00 00 00 
    else
     1c2:	e8 00 00 00 00       	callq  1c7 <device_open+0x37>
    {
     1c7:	c7 05 00 00 00 00 00 	movl   $0x0,0x0(%rip)        # 1d1 <device_open+0x41>
     1ce:	00 00 00 
    else
     1d1:	f0 ff 05 00 00 00 00 	lock incl 0x0(%rip)        # 1d8 <device_open+0x48>
    {
     1d8:	4c 8b 25 00 00 00 00 	mov    0x0(%rip),%r12        # 1df <device_open+0x4f>
     1df:	ba 00 00 20 00       	mov    $0x200000,%edx
}
     1e4:	31 f6                	xor    %esi,%esi
     1e6:	c7 05 00 00 00 00 08 	movl   $0x8,0x0(%rip)        # 1f0 <device_open+0x60>
     1ed:	00 00 00 
        memset(sh_mem, '\0', MAX_SIZE);
     1f0:	4c 89 e7             	mov    %r12,%rdi
}
     1f3:	e8 00 00 00 00       	callq  1f8 <device_open+0x68>
    }
     1f8:	41 89 5c 24 04       	mov    %ebx,0x4(%r12)
     1fd:	41 c7 04 24 00 00 00 	movl   $0x0,(%r12)
     204:	00 
     205:	31 db                	xor    %ebx,%ebx
     207:	89 d8                	mov    %ebx,%eax

     209:	5b                   	pop    %rbx
     20a:	41 5c                	pop    %r12
     20c:	5d                   	pop    %rbp
     20d:	c3                   	retq   
     20e:	66 90                	xchg   %ax,%ax

0000000000000210 <device_mmap>:
     210:	e8 00 00 00 00       	callq  215 <device_mmap+0x5>
     215:	48 89 f7             	mov    %rsi,%rdi
}
     218:	48 8b 36             	mov    (%rsi),%rsi
     21b:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
     21f:	48 29 f1             	sub    %rsi,%rcx

     222:	48 81 f9 00 00 20 00 	cmp    $0x200000,%rcx
    if (!mutex_trylock(&mchar_mutex))
     229:	77 4d                	ja     278 <device_mmap+0x68>
     22b:	55                   	push   %rbp
     22c:	48 8b 87 98 00 00 00 	mov    0x98(%rdi),%rax
     233:	ba 00 00 00 80       	mov    $0x80000000,%edx
    share_mem_flag = -1;
     238:	4c 8b 05 00 00 00 00 	mov    0x0(%rip),%r8        # 23f <device_mmap+0x2f>
     23f:	48 89 e5             	mov    %rsp,%rbp
    vma->vm_flags |= 0;
     242:	48 c1 e0 0c          	shl    $0xc,%rax
     246:	48 03 05 00 00 00 00 	add    0x0(%rip),%rax        # 24d <device_mmap+0x3d>
    {
     24d:	48 01 c2             	add    %rax,%rdx
     250:	72 0e                	jb     260 <device_mmap+0x50>

     252:	49 c7 c0 00 00 00 80 	mov    $0xffffffff80000000,%r8
     259:	4c 2b 05 00 00 00 00 	sub    0x0(%rip),%r8        # 260 <device_mmap+0x50>
    }
     260:	4c 01 c2             	add    %r8,%rdx
     263:	4c 8b 47 48          	mov    0x48(%rdi),%r8
     267:	48 c1 ea 0c          	shr    $0xc,%rdx
     26b:	e8 00 00 00 00       	callq  270 <device_mmap+0x60>
    vma->vm_flags |= 0;
     270:	5d                   	pop    %rbp
     271:	c3                   	retq   
    }
     272:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
     278:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
     27d:	c3                   	retq   
     27e:	66 90                	xchg   %ax,%ax

0000000000000280 <send_msg_to_user_memshare.constprop.5>:
     280:	e8 00 00 00 00       	callq  285 <send_msg_to_user_memshare.constprop.5+0x5>
     285:	55                   	push   %rbp
     286:	83 3d 00 00 00 00 01 	cmpl   $0x1,0x0(%rip)        # 28d <send_msg_to_user_memshare.constprop.5+0xd>
     28d:	48 89 e5             	mov    %rsp,%rbp
     290:	41 55                	push   %r13
     292:	41 54                	push   %r12

     294:	53                   	push   %rbx
     295:	48 89 fb             	mov    %rdi,%rbx
     298:	74 2e                	je     2c8 <send_msg_to_user_memshare.constprop.5+0x48>
     29a:	48 85 db             	test   %rbx,%rbx
     29d:	75 11                	jne    2b0 <send_msg_to_user_memshare.constprop.5+0x30>
     29f:	5b                   	pop    %rbx
    if (type == 1)
     2a0:	41 5c                	pop    %r12
     2a2:	41 5d                	pop    %r13
     2a4:	31 c0                	xor    %eax,%eax
     2a6:	5d                   	pop    %rbp
     2a7:	c3                   	retq   
    ret = remap_pfn_range(vma, vma->vm_start, page_to_pfn(page), size, vma->vm_page_prot);
     2a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
     2af:	00 
static int send_msg_to_user_memshare(char *msg, int kfree_flag)
{
    int i;
    int raw_data_len = 0;
    int write_index_lock_flag = 0;
    int curr_write_index = -1;
     2b0:	48 89 df             	mov    %rbx,%rdi
     2b3:	e8 00 00 00 00       	callq  2b8 <send_msg_to_user_memshare.constprop.5+0x38>
    if (share_mem_flag == 1)
    {

#if (WRITE_INDEX_TRY_LOCK == 1)
        for (i = 0; i < WRITE_INDEX_TRY_LOCK_NUM; i++)
        {
     2b8:	5b                   	pop    %rbx
     2b9:	41 5c                	pop    %r12
     2bb:	41 5d                	pop    %r13
    int curr_write_index = -1;
     2bd:	31 c0                	xor    %eax,%eax
     2bf:	5d                   	pop    %rbp
     2c0:	c3                   	retq   
     2c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        {
     2c8:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
}

static int send_msg_to_user_netlink(char *msg, int kfree_flag)
{
    int msg_size;
    struct nlmsghdr *nlh;
     2cf:	e8 00 00 00 00       	callq  2d4 <send_msg_to_user_memshare.constprop.5+0x54>
     2d4:	48 89 df             	mov    %rbx,%rdi
     2d7:	e8 00 00 00 00       	callq  2dc <send_msg_to_user_memshare.constprop.5+0x5c>
     2dc:	85 c0                	test   %eax,%eax
     2de:	49 89 c4             	mov    %rax,%r12
            curr_write_index = get_write_index();
     2e1:	75 0d                	jne    2f0 <send_msg_to_user_memshare.constprop.5+0x70>
     2e3:	f0 ff 05 00 00 00 00 	lock incl 0x0(%rip)        # 2ea <send_msg_to_user_memshare.constprop.5+0x6a>
    struct nlmsghdr *nlh;
     2ea:	eb ae                	jmp    29a <send_msg_to_user_memshare.constprop.5+0x1a>
     2ec:	0f 1f 40 00          	nopl   0x0(%rax)
     2f0:	83 3d 00 00 00 00 01 	cmpl   $0x1,0x0(%rip)        # 2f7 <send_msg_to_user_memshare.constprop.5+0x77>
     2f7:	8b 0d 00 00 00 00    	mov    0x0(%rip),%ecx        # 2fd <send_msg_to_user_memshare.constprop.5+0x7d>
}
     2fd:	41 89 cd             	mov    %ecx,%r13d
     300:	41 83 dd ff          	sbb    $0xffffffff,%r13d
                if (msg && kfree_flag == 1)
     304:	83 3d 00 00 00 00 01 	cmpl   $0x1,0x0(%rip)        # 30b <send_msg_to_user_memshare.constprop.5+0x8b>
     30b:	0f 84 97 00 00 00    	je     3a8 <send_msg_to_user_memshare.constprop.5+0x128>

     311:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 318 <send_msg_to_user_memshare.constprop.5+0x98>
     318:	81 c1 00 80 00 00    	add    $0x8000,%ecx
     31e:	81 f9 ff ff 1f 00    	cmp    $0x1fffff,%ecx
            {
     324:	0f 8e ce 00 00 00    	jle    3f8 <send_msg_to_user_memshare.constprop.5+0x178>
    write_index = index;
     32a:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 331 <send_msg_to_user_memshare.constprop.5+0xb1>
            {
     331:	31 d2                	xor    %edx,%edx
     333:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                    if ((curr_write_index + 1024 + raw_data_len) > now_read_index)
     338:	0f b6 0c 16          	movzbl (%rsi,%rdx,1),%ecx
     33c:	88 0c 10             	mov    %cl,(%rax,%rdx,1)
     33f:	48 83 c2 01          	add    $0x1,%rdx
     343:	48 83 fa 08          	cmp    $0x8,%rdx
     347:	75 ef                	jne    338 <send_msg_to_user_memshare.constprop.5+0xb8>
#if (KERNEL_PRINT == 1)
     349:	81 38 00 00 08 00    	cmpl   $0x80000,(%rax)
     34f:	4d 63 ed             	movslq %r13d,%r13
     352:	49 63 d4             	movslq %r12d,%rdx
     355:	4a 8d 7c 2e 08       	lea    0x8(%rsi,%r13,1),%rdi
     35a:	0f 9e c0             	setle  %al
     35d:	0f b6 c0             	movzbl %al,%eax
     360:	8d 44 00 ff          	lea    -0x1(%rax,%rax,1),%eax
     364:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 36a <send_msg_to_user_memshare.constprop.5+0xea>

     36a:	4a 8d 04 2e          	lea    (%rsi,%r13,1),%rax
     36e:	48 89 de             	mov    %rbx,%rsi
     371:	44 89 20             	mov    %r12d,(%rax)
}
     374:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
                new_msg_slot = get_solt(raw_data_len, 1);
     37b:	e8 00 00 00 00       	callq  380 <send_msg_to_user_memshare.constprop.5+0x100>
                printk("curr_write_index:%d pre_slot_len:%d now_write_index:%d now_read_index:%d\n",
     380:	c7 05 00 00 00 00 07 	movl   $0x7,0x0(%rip)        # 38a <send_msg_to_user_memshare.constprop.5+0x10a>
     387:	00 00 00 
                new_msg_slot = get_solt(raw_data_len, 1);
     38a:	41 83 c4 08          	add    $0x8,%r12d
     38e:	44 89 25 00 00 00 00 	mov    %r12d,0x0(%rip)        # 395 <send_msg_to_user_memshare.constprop.5+0x115>
     395:	f0 ff 05 00 00 00 00 	lock incl 0x0(%rip)        # 39c <send_msg_to_user_memshare.constprop.5+0x11c>
                printk("curr_write_index:%d pre_slot_len:%d now_write_index:%d now_read_index:%d\n",
     39c:	e9 f9 fe ff ff       	jmpq   29a <send_msg_to_user_memshare.constprop.5+0x1a>
     3a1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
     3a8:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 3af <send_msg_to_user_memshare.constprop.5+0x12f>
                       curr_write_index, pre_slot_len, now_write_index, now_read_index);
     3af:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 3b6 <send_msg_to_user_memshare.constprop.5+0x136>
    struct msg_slot new_msg_slot = {len, next};
     3b6:	31 d2                	xor    %edx,%edx
     3b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
     3bf:	00 
    if (msg && kfree_flag == 1)
     3c0:	0f b6 04 16          	movzbl (%rsi,%rdx,1),%eax
     3c4:	88 04 17             	mov    %al,(%rdi,%rdx,1)
     3c7:	48 83 c2 01          	add    $0x1,%rdx
     3cb:	48 83 fa 08          	cmp    $0x8,%rdx
     3cf:	75 ef                	jne    3c0 <send_msg_to_user_memshare.constprop.5+0x140>
     3d1:	8b 07                	mov    (%rdi),%eax
     3d3:	8d 51 01             	lea    0x1(%rcx),%edx
     3d6:	39 d0                	cmp    %edx,%eax
     3d8:	0f 8e 3a ff ff ff    	jle    318 <send_msg_to_user_memshare.constprop.5+0x98>
     3de:	42 8d 94 21 00 04 00 	lea    0x400(%rcx,%r12,1),%edx
     3e5:	00 
                    if ((curr_write_index + 1024 + raw_data_len) > now_read_index)
     3e6:	39 d0                	cmp    %edx,%eax
     3e8:	0f 8c f5 fe ff ff    	jl     2e3 <send_msg_to_user_memshare.constprop.5+0x63>
     3ee:	e9 25 ff ff ff       	jmpq   318 <send_msg_to_user_memshare.constprop.5+0x98>

     3f3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
     3f8:	49 63 c5             	movslq %r13d,%rax
}
     3fb:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
     3ff:	48 8d 7c 06 08       	lea    0x8(%rsi,%rax,1),%rdi
            }
     404:	48 89 de             	mov    %rbx,%rsi
     407:	44 89 22             	mov    %r12d,(%rdx)
     40a:	c7 42 04 ff ff ff ff 	movl   $0xffffffff,0x4(%rdx)
            if ((curr_write_index + CHECK_WRITE_INDEX_THRESHOLD) >= MAX_SIZE)
     411:	49 63 d4             	movslq %r12d,%rdx
     414:	e8 00 00 00 00       	callq  419 <send_msg_to_user_memshare.constprop.5+0x199>
     419:	43 8d 44 25 08       	lea    0x8(%r13,%r12,1),%eax
     41e:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 424 <send_msg_to_user_memshare.constprop.5+0x1a4>
     424:	e9 61 ff ff ff       	jmpq   38a <send_msg_to_user_memshare.constprop.5+0x10a>
            pre_slot_len = raw_data_len + 8;
     429:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000000430 <monitor_finit_module_hook>:
            write_index_unlock();
     430:	e8 00 00 00 00       	callq  435 <monitor_finit_module_hook+0x5>
     435:	55                   	push   %rbp
     436:	48 89 e5             	mov    %rsp,%rbp
            pre_slot_len = raw_data_len + 8;
     439:	41 57                	push   %r15
     43b:	41 56                	push   %r14
     43d:	41 89 d6             	mov    %edx,%r14d
     440:	41 55                	push   %r13
            write_index_unlock();
     442:	49 89 f5             	mov    %rsi,%r13
     445:	41 54                	push   %r12
     447:	41 89 fc             	mov    %edi,%r12d
        }
     44a:	53                   	push   %rbx
     44b:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
     452:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
     459:	00 00 
     45b:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
     462:	00 
             current->real_cred->uid.val, "\n", FINIT_MODULE_TYPE, "\n", cwd,
             "\n", current->pid, "\n", current->real_parent->pid, "\n",
             pid_vnr(task_pgrp(current)), "\n", current->tgid, "\n",
             current->comm, "\n", current->nsproxy->uts_ns->name.nodename);

    send_msg_to_user(SEND_TYPE, result_str, 1);
     463:	31 c0                	xor    %eax,%eax
     465:	65 48 8b 04 25 00 00 	mov    %gs:0x0,%rax
     46c:	00 00 
     46e:	83 3d 00 00 00 00 ff 	cmpl   $0xffffffff,0x0(%rip)        # 475 <monitor_finit_module_hook+0x45>
     475:	48 8b 80 58 07 00 00 	mov    0x758(%rax),%rax
     47c:	48 8b 58 08          	mov    0x8(%rax),%rbx
     480:	0f 84 ee 01 00 00    	je     674 <monitor_finit_module_hook+0x244>
     486:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 48d <monitor_finit_module_hook+0x5d>
     48d:	48 85 f6             	test   %rsi,%rsi
     490:	0f 84 5a 02 00 00    	je     6f0 <monitor_finit_module_hook+0x2c0>
     496:	40 f6 c6 01          	test   $0x1,%sil
     49a:	48 89 f7             	mov    %rsi,%rdi
     49d:	ba 64 00 00 00       	mov    $0x64,%edx
    ktime_t stime;
    char *result_str = NULL;
    struct sockaddr tmp_dirp;
    long ori_connect_syscall_res;
    int copy_res = copy_from_user(&tmp_dirp, dirp, 16);
    get_start_time(&stime);
     4a2:	0f 85 76 02 00 00    	jne    71e <monitor_finit_module_hook+0x2ee>
    struct sockaddr tmp_dirp;
     4a8:	40 f6 c7 02          	test   $0x2,%dil
    long ori_connect_syscall_res;
     4ac:	0f 85 7a 02 00 00    	jne    72c <monitor_finit_module_hook+0x2fc>
    get_start_time(&stime);
     4b2:	40 f6 c7 04          	test   $0x4,%dil
    ori_connect_syscall_res = orig_connect(fd, dirp, addrlen);
    result_str = kzalloc(16, GFP_ATOMIC);
    snprintf(result_str, 16, "%ld", get_time_interval(stime));
     4b6:	0f 85 82 02 00 00    	jne    73e <monitor_finit_module_hook+0x30e>
     4bc:	89 d1                	mov    %edx,%ecx
     4be:	31 c0                	xor    %eax,%eax
     4c0:	c1 e9 03             	shr    $0x3,%ecx
     4c3:	f6 c2 04             	test   $0x4,%dl
    if (copy_res == 0)
     4c6:	f3 48 ab             	rep stos %rax,%es:(%rdi)
     4c9:	0f 85 09 02 00 00    	jne    6d8 <monitor_finit_module_hook+0x2a8>
     4cf:	f6 c2 02             	test   $0x2,%dl
     4d2:	0f 85 e8 01 00 00    	jne    6c0 <monitor_finit_module_hook+0x290>
     4d8:	83 e2 01             	and    $0x1,%edx
     4db:	0f 85 d7 01 00 00    	jne    6b8 <monitor_finit_module_hook+0x288>
     4e1:	48 89 35 00 00 00 00 	mov    %rsi,0x0(%rip)        # 4e8 <monitor_finit_module_hook+0xb8>
     4e8:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
     4ec:	48 83 3f 00          	cmpq   $0x0,(%rdi)
     4f0:	0f 84 1f 02 00 00    	je     715 <monitor_finit_module_hook+0x2e5>
     4f6:	31 d2                	xor    %edx,%edx
     4f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
     4ff:	00 
     500:	83 c2 01             	add    $0x1,%edx
     503:	48 63 ca             	movslq %edx,%rcx
     506:	48 83 3c cf 00       	cmpq   $0x0,(%rdi,%rcx,8)
     50b:	4c 8d 04 cd 00 00 00 	lea    0x0(,%rcx,8),%r8
     512:	00 
     513:	75 eb                	jne    500 <monitor_finit_module_hook+0xd0>
     515:	4a 8b 44 07 f8       	mov    -0x8(%rdi,%r8,1),%rax
    {
        if (tmp_dirp.sa_family == AF_INET)
            send_msg_to_user(SEND_TYPE, result_str, 1);
    }
     51a:	48 8b 48 10          	mov    0x10(%rax),%rcx
     51e:	48 8b 58 18          	mov    0x18(%rax),%rbx
     522:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
     529:	00 
     52a:	ba 64 00 00 00       	mov    $0x64,%edx
     52f:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
     536:	00 
     537:	48 89 9c 24 98 00 00 	mov    %rbx,0x98(%rsp)
     53e:	00 
     53f:	e8 00 00 00 00       	callq  544 <monitor_finit_module_hook+0x114>
     544:	48 89 c7             	mov    %rax,%rdi

    return ori_connect_syscall_res;
}
     547:	48 89 c3             	mov    %rax,%rbx
     54a:	e8 00 00 00 00       	callq  54f <monitor_finit_module_hook+0x11f>
     54f:	44 8d 50 04          	lea    0x4(%rax),%r10d

     553:	be 20 80 00 00       	mov    $0x8020,%esi
     558:	4d 63 d2             	movslq %r10d,%r10
     55b:	4c 89 d7             	mov    %r10,%rdi
     55e:	4c 89 54 24 70       	mov    %r10,0x70(%rsp)
}
     563:	e8 00 00 00 00       	callq  568 <monitor_finit_module_hook+0x138>
     568:	65 48 8b 14 25 00 00 	mov    %gs:0x0,%rdx
     56f:	00 00 

     571:	49 89 c7             	mov    %rax,%r15
asmlinkage long monitor_connect_hook(int fd, struct sockaddr __user *dirp, int addrlen)
     574:	48 8b 82 60 07 00 00 	mov    0x760(%rdx),%rax
     57b:	8b b2 a8 04 00 00    	mov    0x4a8(%rdx),%esi
     581:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
     588:	00 
{
     589:	48 8b 40 08          	mov    0x8(%rax),%rax
     58d:	89 74 24 7c          	mov    %esi,0x7c(%rsp)
     591:	48 83 c0 45          	add    $0x45,%rax
     595:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
     59c:	00 
     59d:	48 8b 82 e8 04 00 00 	mov    0x4e8(%rdx),%rax
    char dip[64];
    char dport[16];
    char sip[64] = "-1";
    char sport[16] = "-1";
    char *final_path = NULL;
     5a4:	48 8b b8 38 05 00 00 	mov    0x538(%rax),%rdi
    char dip[64];
     5ab:	e8 00 00 00 00       	callq  5b0 <monitor_finit_module_hook+0x180>
     5b0:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
     5b7:	00 
     5b8:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
     5bf:	00 
     5c0:	49 c7 c1 00 00 00 00 	mov    $0x0,%r9
    char *final_path = NULL;
     5c7:	4c 8b 54 24 70       	mov    0x70(%rsp),%r10
     5cc:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8
     5d3:	48 8b 8a 68 06 00 00 	mov    0x668(%rdx),%rcx
    char dip[64];
     5da:	48 8d ba 78 06 00 00 	lea    0x678(%rdx),%rdi
     5e1:	8b 49 04             	mov    0x4(%rcx),%ecx
     5e4:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
     5e9:	8b 74 24 7c          	mov    0x7c(%rsp),%esi
     5ed:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
     5f2:	4c 89 ff             	mov    %r15,%rdi
     5f5:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
     5fc:	00 00 
     5fe:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
     605:	00 00 
     607:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
     60e:	00 00 
     610:	89 44 24 38          	mov    %eax,0x38(%rsp)
     614:	89 74 24 48          	mov    %esi,0x48(%rsp)
     618:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
     61f:	00 00 
     621:	4c 89 d6             	mov    %r10,%rsi
     624:	48 8b 82 b8 04 00 00 	mov    0x4b8(%rdx),%rax
     62b:	8b 80 a4 04 00 00    	mov    0x4a4(%rax),%eax
     631:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
     638:	00 00 
     63a:	89 44 24 28          	mov    %eax,0x28(%rsp)
     63e:	8b 82 a4 04 00 00    	mov    0x4a4(%rdx),%eax
     644:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
     64b:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
     652:	00 00 
     654:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
     659:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
     660:	00 
     661:	89 44 24 18          	mov    %eax,0x18(%rsp)
     665:	31 c0                	xor    %eax,%eax
     667:	e8 00 00 00 00       	callq  66c <monitor_finit_module_hook+0x23c>
     66c:	4c 89 ff             	mov    %r15,%rdi
     66f:	e8 0c fc ff ff       	callq  280 <send_msg_to_user_memshare.constprop.5>
     674:	44 89 f2             	mov    %r14d,%edx
     677:	4c 89 ee             	mov    %r13,%rsi
     67a:	44 89 e7             	mov    %r12d,%edi
     67d:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 684 <monitor_finit_module_hook+0x254>
     684:	e8 00 00 00 00       	callq  689 <monitor_finit_module_hook+0x259>
     689:	48 8b 9c 24 a0 00 00 	mov    0xa0(%rsp),%rbx
     690:	00 
     691:	65 48 33 1c 25 28 00 	xor    %gs:0x28,%rbx
     698:	00 00 
     69a:	0f 85 b0 00 00 00    	jne    750 <monitor_finit_module_hook+0x320>

     6a0:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
    char *result_str = NULL;
    char *ktime_result_str = NULL;
    int flag = 0;
     6a7:	5b                   	pop    %rbx
     6a8:	41 5c                	pop    %r12
     6aa:	41 5d                	pop    %r13
     6ac:	41 5e                	pop    %r14
     6ae:	41 5f                	pop    %r15
     6b0:	5d                   	pop    %rbp
     6b1:	c3                   	retq   
     6b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
     6b8:	c6 07 00             	movb   $0x0,(%rdi)
    int sa_family = 0;
     6bb:	e9 21 fe ff ff       	jmpq   4e1 <monitor_finit_module_hook+0xb1>
     6c0:	31 c0                	xor    %eax,%eax
     6c2:	48 83 c7 02          	add    $0x2,%rdi
     6c6:	66 89 47 fe          	mov    %ax,-0x2(%rdi)
     6ca:	83 e2 01             	and    $0x1,%edx
     6cd:	0f 84 0e fe ff ff    	je     4e1 <monitor_finit_module_hook+0xb1>
     6d3:	eb e3                	jmp    6b8 <monitor_finit_module_hook+0x288>
     6d5:	0f 1f 00             	nopl   (%rax)
     6d8:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
     6de:	48 83 c7 04          	add    $0x4,%rdi
     6e2:	f6 c2 02             	test   $0x2,%dl
     6e5:	0f 84 ed fd ff ff    	je     4d8 <monitor_finit_module_hook+0xa8>
    if (copy_res == 0)
     6eb:	eb d3                	jmp    6c0 <monitor_finit_module_hook+0x290>
     6ed:	0f 1f 00             	nopl   (%rax)
     6f0:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 6f7 <monitor_finit_module_hook+0x2c7>
     6f7:	be 20 80 00 00       	mov    $0x8020,%esi
     6fc:	ba 64 00 00 00       	mov    $0x64,%edx
     701:	e8 00 00 00 00       	callq  706 <monitor_finit_module_hook+0x2d6>
     706:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 70d <monitor_finit_module_hook+0x2dd>
     70d:	48 89 c6             	mov    %rax,%rsi
     710:	e9 d3 fd ff ff       	jmpq   4e8 <monitor_finit_module_hook+0xb8>
     715:	48 8b 47 f8          	mov    -0x8(%rdi),%rax
     719:	e9 fc fd ff ff       	jmpq   51a <monitor_finit_module_hook+0xea>
     71e:	c6 06 00             	movb   $0x0,(%rsi)
     721:	48 8d 7e 01          	lea    0x1(%rsi),%rdi
     725:	b2 63                	mov    $0x63,%dl
     727:	e9 7c fd ff ff       	jmpq   4a8 <monitor_finit_module_hook+0x78>
     72c:	31 c9                	xor    %ecx,%ecx
     72e:	48 83 c7 02          	add    $0x2,%rdi
     732:	83 ea 02             	sub    $0x2,%edx
     735:	66 89 4f fe          	mov    %cx,-0x2(%rdi)
        if (tmp_dirp.sa_family == AF_INET)
     739:	e9 74 fd ff ff       	jmpq   4b2 <monitor_finit_module_hook+0x82>
     73e:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
     744:	83 ea 04             	sub    $0x4,%edx
}
     747:	48 83 c7 04          	add    $0x4,%rdi
     74b:	e9 6c fd ff ff       	jmpq   4bc <monitor_finit_module_hook+0x8c>
    if (copy_res == 0)
     750:	e8 00 00 00 00       	callq  755 <monitor_finit_module_hook+0x325>
     755:	90                   	nop
     756:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
     75d:	00 00 00 

0000000000000760 <monitor_init_module_hook>:
     760:	e8 00 00 00 00       	callq  765 <monitor_init_module_hook+0x5>
     765:	55                   	push   %rbp
     766:	48 89 e5             	mov    %rsp,%rbp
     769:	41 57                	push   %r15
     76b:	41 56                	push   %r14
     76d:	49 89 d6             	mov    %rdx,%r14
     770:	41 55                	push   %r13
     772:	49 89 f5             	mov    %rsi,%r13
     775:	41 54                	push   %r12
     777:	49 89 fc             	mov    %rdi,%r12
     77a:	53                   	push   %rbx
     77b:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
    int sa_family = 0;
     782:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
     789:	00 00 
     78b:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
     792:	00 
    send_msg_to_user(SEND_TYPE, result_str, 1);
     793:	31 c0                	xor    %eax,%eax
     795:	65 48 8b 04 25 00 00 	mov    %gs:0x0,%rax
     79c:	00 00 
     79e:	83 3d 00 00 00 00 ff 	cmpl   $0xffffffff,0x0(%rip)        # 7a5 <monitor_init_module_hook+0x45>
     7a5:	48 8b 80 58 07 00 00 	mov    0x758(%rax),%rax
     7ac:	48 8b 58 08          	mov    0x8(%rax),%rbx
     7b0:	0f 84 ee 01 00 00    	je     9a4 <monitor_init_module_hook+0x244>
     7b6:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 7bd <monitor_init_module_hook+0x5d>
     7bd:	48 85 f6             	test   %rsi,%rsi
     7c0:	0f 84 5a 02 00 00    	je     a20 <monitor_init_module_hook+0x2c0>
     7c6:	40 f6 c6 01          	test   $0x1,%sil
     7ca:	48 89 f7             	mov    %rsi,%rdi
     7cd:	ba 64 00 00 00       	mov    $0x64,%edx
    struct path files_path;
     7d2:	0f 85 76 02 00 00    	jne    a4e <monitor_init_module_hook+0x2ee>
    int i = 0;
     7d8:	40 f6 c7 02          	test   $0x2,%dil
    struct files_struct *current_files;
     7dc:	0f 85 7a 02 00 00    	jne    a5c <monitor_init_module_hook+0x2fc>
    struct path files_path;
     7e2:	40 f6 c7 04          	test   $0x4,%dil
    files_table = files_fdtable(current_files);
     7e6:	0f 85 82 02 00 00    	jne    a6e <monitor_init_module_hook+0x30e>
     7ec:	89 d1                	mov    %edx,%ecx
     7ee:	31 c0                	xor    %eax,%eax
     7f0:	c1 e9 03             	shr    $0x3,%ecx
     7f3:	f6 c2 04             	test   $0x4,%dl

     7f6:	f3 48 ab             	rep stos %rax,%es:(%rdi)
     7f9:	0f 85 09 02 00 00    	jne    a08 <monitor_init_module_hook+0x2a8>
     7ff:	f6 c2 02             	test   $0x2,%dl
     802:	0f 85 e8 01 00 00    	jne    9f0 <monitor_init_module_hook+0x290>
     808:	83 e2 01             	and    $0x1,%edx
     80b:	0f 85 d7 01 00 00    	jne    9e8 <monitor_init_module_hook+0x288>
     811:	48 89 35 00 00 00 00 	mov    %rsi,0x0(%rip)        # 818 <monitor_init_module_hook+0xb8>
     818:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
     81c:	48 83 3f 00          	cmpq   $0x0,(%rdi)
     820:	0f 84 1f 02 00 00    	je     a45 <monitor_init_module_hook+0x2e5>
     826:	31 d2                	xor    %edx,%edx
     828:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
     82f:	00 
     830:	83 c2 01             	add    $0x1,%edx
     833:	48 63 ca             	movslq %edx,%rcx
     836:	48 83 3c cf 00       	cmpq   $0x0,(%rdi,%rcx,8)
     83b:	4c 8d 04 cd 00 00 00 	lea    0x0(,%rcx,8),%r8
     842:	00 
     843:	75 eb                	jne    830 <monitor_init_module_hook+0xd0>
     845:	4a 8b 44 07 f8       	mov    -0x8(%rdi,%r8,1),%rax
    if (init_module_buf)
     84a:	48 8b 48 10          	mov    0x10(%rax),%rcx
     84e:	48 8b 58 18          	mov    0x18(%rax),%rbx
     852:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
     859:	00 
     85a:	ba 64 00 00 00       	mov    $0x64,%edx
     85f:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
     866:	00 
     867:	48 89 9c 24 98 00 00 	mov    %rbx,0x98(%rsp)
     86e:	00 
     86f:	e8 00 00 00 00       	callq  874 <monitor_init_module_hook+0x114>
     874:	48 89 c7             	mov    %rax,%rdi
        init_module_buf = kzalloc(100 * sizeof(char), GFP_ATOMIC);
     877:	48 89 c3             	mov    %rax,%rbx
     87a:	e8 00 00 00 00       	callq  87f <monitor_init_module_hook+0x11f>
     87f:	44 8d 50 04          	lea    0x4(%rax),%r10d

     883:	be 20 80 00 00       	mov    $0x8020,%esi
     888:	4d 63 d2             	movslq %r10d,%r10
     88b:	4c 89 d7             	mov    %r10,%rdi
     88e:	4c 89 54 24 70       	mov    %r10,0x70(%rsp)
        init_module_buf = kzalloc(100 * sizeof(char), GFP_ATOMIC);
     893:	e8 00 00 00 00       	callq  898 <monitor_init_module_hook+0x138>
     898:	65 48 8b 14 25 00 00 	mov    %gs:0x0,%rdx
     89f:	00 00 

     8a1:	49 89 c7             	mov    %rax,%r15
    while (files_table->fd[i] != NULL)
     8a4:	48 8b 82 60 07 00 00 	mov    0x760(%rdx),%rax
     8ab:	8b b2 a8 04 00 00    	mov    0x4a8(%rdx),%esi
     8b1:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
     8b8:	00 
        i++;
     8b9:	48 8b 40 08          	mov    0x8(%rax),%rax
     8bd:	89 74 24 7c          	mov    %esi,0x7c(%rsp)
     8c1:	48 83 c0 45          	add    $0x45,%rax
     8c5:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
     8cc:	00 
     8cd:	48 8b 82 e8 04 00 00 	mov    0x4e8(%rdx),%rax
    result_str = kzalloc(result_str_len, GFP_ATOMIC);
     8d4:	48 8b b8 38 05 00 00 	mov    0x538(%rax),%rdi

     8db:	e8 00 00 00 00       	callq  8e0 <monitor_init_module_hook+0x180>
     8e0:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
     8e7:	00 
     8e8:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
     8ef:	00 
     8f0:	49 c7 c1 00 00 00 00 	mov    $0x0,%r9
    result_str = kzalloc(result_str_len, GFP_ATOMIC);
     8f7:	4c 8b 54 24 70       	mov    0x70(%rsp),%r10
     8fc:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8
     903:	48 8b 8a 68 06 00 00 	mov    0x668(%rdx),%rcx

     90a:	48 8d ba 78 06 00 00 	lea    0x678(%rdx),%rdi
     911:	8b 49 04             	mov    0x4(%rcx),%ecx
     914:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
     919:	8b 74 24 7c          	mov    0x7c(%rsp),%esi
     91d:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
     922:	4c 89 ff             	mov    %r15,%rdi
     925:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
     92c:	00 00 
     92e:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
     935:	00 00 
     937:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
     93e:	00 00 
     940:	89 44 24 38          	mov    %eax,0x38(%rsp)
     944:	89 74 24 48          	mov    %esi,0x48(%rsp)
     948:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
     94f:	00 00 
     951:	4c 89 d6             	mov    %r10,%rsi
     954:	48 8b 82 b8 04 00 00 	mov    0x4b8(%rdx),%rax
     95b:	8b 80 a4 04 00 00    	mov    0x4a4(%rax),%eax
     961:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
     968:	00 00 
     96a:	89 44 24 28          	mov    %eax,0x28(%rsp)
     96e:	8b 82 a4 04 00 00    	mov    0x4a4(%rdx),%eax
     974:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
     97b:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
     982:	00 00 
     984:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
     989:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
     990:	00 
     991:	89 44 24 18          	mov    %eax,0x18(%rsp)
     995:	31 c0                	xor    %eax,%eax
     997:	e8 00 00 00 00       	callq  99c <monitor_init_module_hook+0x23c>
     99c:	4c 89 ff             	mov    %r15,%rdi
     99f:	e8 dc f8 ff ff       	callq  280 <send_msg_to_user_memshare.constprop.5>
     9a4:	4c 89 f2             	mov    %r14,%rdx
     9a7:	4c 89 ee             	mov    %r13,%rsi
     9aa:	4c 89 e7             	mov    %r12,%rdi
     9ad:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 9b4 <monitor_init_module_hook+0x254>
     9b4:	e8 00 00 00 00       	callq  9b9 <monitor_init_module_hook+0x259>
     9b9:	48 8b 9c 24 a0 00 00 	mov    0xa0(%rsp),%rbx
     9c0:	00 
     9c1:	65 48 33 1c 25 28 00 	xor    %gs:0x28,%rbx
     9c8:	00 00 
     9ca:	0f 85 b0 00 00 00    	jne    a80 <monitor_init_module_hook+0x320>

     9d0:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
             "\n", current->pid, "\n", current->real_parent->pid, "\n",
     9d7:	5b                   	pop    %rbx
     9d8:	41 5c                	pop    %r12
     9da:	41 5d                	pop    %r13
     9dc:	41 5e                	pop    %r14
     9de:	41 5f                	pop    %r15
     9e0:	5d                   	pop    %rbp
     9e1:	c3                   	retq   
     9e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
     9e8:	c6 07 00             	movb   $0x0,(%rdi)
             pid_vnr(task_pgrp(current)), "\n", current->tgid, "\n",
     9eb:	e9 21 fe ff ff       	jmpq   811 <monitor_init_module_hook+0xb1>
     9f0:	31 c0                	xor    %eax,%eax
     9f2:	48 83 c7 02          	add    $0x2,%rdi
     9f6:	66 89 47 fe          	mov    %ax,-0x2(%rdi)
     9fa:	83 e2 01             	and    $0x1,%edx
     9fd:	0f 84 0e fe ff ff    	je     811 <monitor_init_module_hook+0xb1>
     a03:	eb e3                	jmp    9e8 <monitor_init_module_hook+0x288>
     a05:	0f 1f 00             	nopl   (%rax)
     a08:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
     a0e:	48 83 c7 04          	add    $0x4,%rdi
     a12:	f6 c2 02             	test   $0x2,%dl
     a15:	0f 84 ed fd ff ff    	je     808 <monitor_init_module_hook+0xa8>

     a1b:	eb d3                	jmp    9f0 <monitor_init_module_hook+0x290>
     a1d:	0f 1f 00             	nopl   (%rax)
     a20:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # a27 <monitor_init_module_hook+0x2c7>
     a27:	be 20 80 00 00       	mov    $0x8020,%esi
     a2c:	ba 64 00 00 00       	mov    $0x64,%edx
     a31:	e8 00 00 00 00       	callq  a36 <monitor_init_module_hook+0x2d6>
     a36:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # a3d <monitor_init_module_hook+0x2dd>
     a3d:	48 89 c6             	mov    %rax,%rsi
     a40:	e9 d3 fd ff ff       	jmpq   818 <monitor_init_module_hook+0xb8>
     a45:	48 8b 47 f8          	mov    -0x8(%rdi),%rax
     a49:	e9 fc fd ff ff       	jmpq   84a <monitor_init_module_hook+0xea>
     a4e:	c6 06 00             	movb   $0x0,(%rsi)
     a51:	48 8d 7e 01          	lea    0x1(%rsi),%rdi
     a55:	b2 63                	mov    $0x63,%dl
     a57:	e9 7c fd ff ff       	jmpq   7d8 <monitor_init_module_hook+0x78>
     a5c:	31 c9                	xor    %ecx,%ecx
     a5e:	48 83 c7 02          	add    $0x2,%rdi
     a62:	83 ea 02             	sub    $0x2,%edx
     a65:	66 89 4f fe          	mov    %cx,-0x2(%rdi)
        return orig_finit_module(fd, uargs, flags);
     a69:	e9 74 fd ff ff       	jmpq   7e2 <monitor_init_module_hook+0x82>
     a6e:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
     a74:	83 ea 04             	sub    $0x4,%edx
        init_module_buf = kzalloc(100 * sizeof(char), GFP_ATOMIC);
     a77:	48 83 c7 04          	add    $0x4,%rdi
     a7b:	e9 6c fd ff ff       	jmpq   7ec <monitor_init_module_hook+0x8c>

     a80:	e8 00 00 00 00       	callq  a85 <monitor_init_module_hook+0x325>
     a85:	90                   	nop
     a86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
     a8d:	00 00 00 

0000000000000a90 <monitor_connect_hook>:
     a90:	e8 00 00 00 00       	callq  a95 <monitor_connect_hook+0x5>
     a95:	55                   	push   %rbp
     a96:	b9 07 00 00 00       	mov    $0x7,%ecx
     a9b:	48 89 e5             	mov    %rsp,%rbp
     a9e:	41 57                	push   %r15
     aa0:	41 56                	push   %r14
     aa2:	49 89 f6             	mov    %rsi,%r14
     aa5:	41 55                	push   %r13
     aa7:	41 54                	push   %r12
     aa9:	41 89 d4             	mov    %edx,%r12d
     aac:	ba 10 00 00 00       	mov    $0x10,%edx
             pid_vnr(task_pgrp(current)), "\n", current->tgid, "\n",
     ab1:	53                   	push   %rbx
     ab2:	89 fb                	mov    %edi,%ebx
     ab4:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
     ab8:	48 81 ec 08 02 00 00 	sub    $0x208,%rsp
     abf:	48 c7 45 90 2d 31 00 	movq   $0x312d,-0x70(%rbp)
     ac6:	00 
    {
        del_use_count();
        return ori_connect_syscall_res;
    }

    if (copy_res == 0)
     ac7:	48 c7 85 40 ff ff ff 	movq   $0x312d,-0xc0(%rbp)
     ace:	2d 31 00 00 
        return ori_connect_syscall_res;
     ad2:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
     ad9:	00 00 
     adb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
     adf:	31 c0                	xor    %eax,%eax
     ae1:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
     ae8:	00 00 00 00 
     aec:	c7 85 f0 fe ff ff 10 	movl   $0x10,-0x110(%rbp)
     af3:	00 00 00 
    if (copy_res == 0)
     af6:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    {
     af9:	48 8d bd 04 ff ff ff 	lea    -0xfc(%rbp),%rdi
     b00:	e8 00 00 00 00       	callq  b05 <monitor_connect_hook+0x75>
        return ori_connect_syscall_res;
     b05:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
     b0c:	49 89 c5             	mov    %rax,%r13
     b0f:	e8 00 00 00 00       	callq  b14 <monitor_connect_hook+0x84>
    {
     b14:	8b 0d 00 00 00 00    	mov    0x0(%rip),%ecx        # b1a <monitor_connect_hook+0x8a>
     b1a:	85 c9                	test   %ecx,%ecx
            sock = sockfd_lookup_light(fd, &err, &fput_needed);
            if (sock)
            {
                kernel_getsockname(sock, (struct sockaddr *)&source_addr, &len);
                snprintf(sport, 16, "%d", Ntohs(source_addr.sin_port));
                snprintf(sip, 64, "%d.%d.%d.%d", NIPQUAD(source_addr.sin_addr));
     b1c:	75 11                	jne    b2f <monitor_connect_hook+0x9f>
     b1e:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b25 <monitor_connect_hook+0x95>
     b25:	65 48 ff 00          	incq   %gs:(%rax)
     b29:	8b 0d 00 00 00 00    	mov    0x0(%rip),%ecx        # b2f <monitor_connect_hook+0x9f>
     b2f:	83 c1 01             	add    $0x1,%ecx
     b32:	89 0d 00 00 00 00    	mov    %ecx,0x0(%rip)        # b38 <monitor_connect_hook+0xa8>
}
     b38:	f0 ff 05 00 00 00 00 	lock incl 0x0(%rip)        # b3f <monitor_connect_hook+0xaf>
     b3f:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b46 <monitor_connect_hook+0xb6>
    }
     b46:	44 89 e2             	mov    %r12d,%edx
     b49:	4c 89 f6             	mov    %r14,%rsi
     b4c:	89 df                	mov    %ebx,%edi
    write_use_count_unlock();
     b4e:	e8 00 00 00 00       	callq  b53 <monitor_connect_hook+0xc3>
     b53:	83 3d 00 00 00 00 ff 	cmpl   $0xffffffff,0x0(%rip)        # b5a <monitor_connect_hook+0xca>
}
     b5a:	49 89 c4             	mov    %rax,%r12
     b5d:	74 1c                	je     b7b <monitor_connect_hook+0xeb>
{
     b5f:	45 85 ed             	test   %r13d,%r13d
     b62:	75 17                	jne    b7b <monitor_connect_hook+0xeb>
     b64:	0f b7 85 04 ff ff ff 	movzwl -0xfc(%rbp),%eax
     b6b:	66 83 f8 02          	cmp    $0x2,%ax
            sin = (struct sockaddr_in *)&tmp_dirp;
            snprintf(dip, 64, "%d.%d.%d.%d", NIPQUAD(sin->sin_addr.s_addr));
            snprintf(dport, 16, "%d", Ntohs(sin->sin_port));
        }
        else if (tmp_dirp.sa_family == AF_INET6)
        {
     b6f:	0f 84 5b 02 00 00    	je     dd0 <monitor_connect_hook+0x340>
     b75:	66 83 f8 0a          	cmp    $0xa,%ax
     b79:	74 35                	je     bb0 <monitor_connect_hook+0x120>
     b7b:	e8 20 f5 ff ff       	callq  a0 <del_use_count>
     b80:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
            flag = 1;
            sa_family = 6;
     b84:	65 48 33 1c 25 28 00 	xor    %gs:0x28,%rbx
     b8b:	00 00 
     b8d:	4c 89 e0             	mov    %r12,%rax
            sock = sockfd_lookup_light(fd, &err, &fput_needed);
            if (sock)
            {
                kernel_getsockname(sock, (struct sockaddr *)&source_addr6, &len);
                snprintf(sport, 16, "%d", Ntohs(source_addr6.sin6_port));
                snprintf(sip, 64, "%d:%d:%d:%d:%d:%d:%d:%d", NIP6(source_addr6.sin6_addr));
     b90:	0f 85 28 07 00 00    	jne    12be <monitor_connect_hook+0x82e>
            }
            sin6 = (struct sockaddr_in6 *)&tmp_dirp;
            snprintf(dip, 64, "%d:%d:%d:%d:%d:%d:%d:%d", NIP6(sin6->sin6_addr));
            snprintf(dport, 16, "%d", Ntohs(sin6->sin6_port));
        }

     b96:	48 81 c4 08 02 00 00 	add    $0x208,%rsp
     b9d:	5b                   	pop    %rbx
     b9e:	41 5c                	pop    %r12
     ba0:	41 5d                	pop    %r13
     ba2:	41 5e                	pop    %r14
     ba4:	41 5f                	pop    %r15
                    }
                    else
                    {
                        pathname = kzalloc(PATH_MAX, GFP_ATOMIC);
                    }
                }
     ba6:	5d                   	pop    %rbp
     ba7:	c3                   	retq   
     ba8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
     baf:	00 
#if (SEND_TYPE == SHERE_MEM)
    major = register_chrdev(0, DEVICE_NAME, &mchar_fops);

    if (major < 0)
    {
        pr_err("REGISTER_CHRDEV_ERROR\n");
     bb0:	48 8d 95 ec fe ff ff 	lea    -0x114(%rbp),%rdx
     bb7:	48 8d b5 e8 fe ff ff 	lea    -0x118(%rbp),%rsi
     bbe:	89 df                	mov    %ebx,%edi
     bc0:	e8 1b f5 ff ff       	callq  e0 <sockfd_lookup_light>
     bc5:	48 85 c0             	test   %rax,%rax
     bc8:	49 89 c5             	mov    %rax,%r13
     bcb:	0f 84 3d 06 00 00    	je     120e <monitor_connect_hook+0x77e>
     bd1:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
     bd8:	48 8d b5 14 ff ff ff 	lea    -0xec(%rbp),%rsi
     bdf:	48 89 c7             	mov    %rax,%rdi
                                   strlen(current->nsproxy->uts_ns->name.nodename) +
     be2:	e8 00 00 00 00       	callq  be7 <monitor_connect_hook+0x157>
     be7:	0f b7 8d 16 ff ff ff 	movzwl -0xea(%rbp),%ecx
     bee:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
                                   strlen(current->comm) + strlen(final_path) + 172);
     bf5:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
     bfc:	be 10 00 00 00       	mov    $0x10,%esi
            snprintf(result_str, result_str_len,
     c01:	48 89 c7             	mov    %rax,%rdi
     c04:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
     c0b:	31 c0                	xor    %eax,%eax
     c0d:	66 c1 c1 08          	rol    $0x8,%cx
     c11:	0f b7 c9             	movzwl %cx,%ecx
     c14:	e8 00 00 00 00       	callq  c19 <monitor_connect_hook+0x189>
                     "%d%s%s%s%d%s%d%s%s%s%s%s%s%s%d%s%d%s%d%s%d%s%s%s%s%s%s%s%s",
     c19:	44 0f b7 95 2a ff ff 	movzwl -0xd6(%rbp),%r10d
     c20:	ff 
     c21:	0f b7 bd 28 ff ff ff 	movzwl -0xd8(%rbp),%edi
     c28:	4c 8d 5d 90          	lea    -0x70(%rbp),%r11
     c2c:	0f b7 b5 26 ff ff ff 	movzwl -0xda(%rbp),%esi
     c33:	0f b7 95 24 ff ff ff 	movzwl -0xdc(%rbp),%edx
     c3a:	0f b7 85 22 ff ff ff 	movzwl -0xde(%rbp),%eax
     c41:	44 0f b7 8d 20 ff ff 	movzwl -0xe0(%rbp),%r9d
     c48:	ff 
                     current->real_cred->uid.val, "\n", CONNECT_TYPE, "\n", sa_family,
     c49:	44 0f b7 85 1e ff ff 	movzwl -0xe2(%rbp),%r8d
     c50:	ff 
     c51:	0f b7 8d 1c ff ff ff 	movzwl -0xe4(%rbp),%ecx
     c58:	66 41 c1 c2 08       	rol    $0x8,%r10w
     c5d:	66 c1 c7 08          	rol    $0x8,%di
     c61:	4c 89 9d b8 fe ff ff 	mov    %r11,-0x148(%rbp)
     c68:	66 c1 c6 08          	rol    $0x8,%si
     c6c:	66 c1 c2 08          	rol    $0x8,%dx
     c70:	45 0f b7 d2          	movzwl %r10w,%r10d
     c74:	66 c1 c0 08          	rol    $0x8,%ax
     c78:	66 41 c1 c1 08       	rol    $0x8,%r9w
     c7d:	0f b7 ff             	movzwl %di,%edi
     c80:	66 41 c1 c0 08       	rol    $0x8,%r8w
     c85:	66 c1 c1 08          	rol    $0x8,%cx
     c89:	0f b7 f6             	movzwl %si,%esi
     c8c:	0f b7 d2             	movzwl %dx,%edx
     c8f:	0f b7 c0             	movzwl %ax,%eax
     c92:	89 7c 24 18          	mov    %edi,0x18(%rsp)
     c96:	89 74 24 10          	mov    %esi,0x10(%rsp)
     c9a:	89 54 24 08          	mov    %edx,0x8(%rsp)
     c9e:	be 40 00 00 00       	mov    $0x40,%esi
     ca3:	89 04 24             	mov    %eax,(%rsp)
     ca6:	4c 89 df             	mov    %r11,%rdi
     ca9:	31 c0                	xor    %eax,%eax
     cab:	0f b7 c9             	movzwl %cx,%ecx
     cae:	44 89 54 24 20       	mov    %r10d,0x20(%rsp)
     cb3:	45 0f b7 c9          	movzwl %r9w,%r9d
     cb7:	45 0f b7 c0          	movzwl %r8w,%r8d
     cbb:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
     cc2:	e8 00 00 00 00       	callq  cc7 <monitor_connect_hook+0x237>
     cc7:	8b b5 ec fe ff ff    	mov    -0x114(%rbp),%esi
     ccd:	49 8b 7d 18          	mov    0x18(%r13),%rdi
     cd1:	85 f6                	test   %esi,%esi
     cd3:	0f 85 a6 05 00 00    	jne    127f <monitor_connect_hook+0x7ef>
     cd9:	0f b7 85 1a ff ff ff 	movzwl -0xe6(%rbp),%eax
     ce0:	44 0f b7 95 18 ff ff 	movzwl -0xe8(%rbp),%r10d
     ce7:	ff 
     ce8:	0f b7 bd 16 ff ff ff 	movzwl -0xea(%rbp),%edi
     cef:	66 c1 c0 08          	rol    $0x8,%ax
     cf3:	0f b7 b5 14 ff ff ff 	movzwl -0xec(%rbp),%esi
     cfa:	0f b7 95 12 ff ff ff 	movzwl -0xee(%rbp),%edx
     d01:	0f b7 c0             	movzwl %ax,%eax
     d04:	44 0f b7 8d 10 ff ff 	movzwl -0xf0(%rbp),%r9d
     d0b:	ff 
                     current->comm, "\n", current->nsproxy->uts_ns->name.nodename, "\n",
     d0c:	44 0f b7 85 0e ff ff 	movzwl -0xf2(%rbp),%r8d
     d13:	ff 
     d14:	4c 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%r11
     d1b:	0f b7 8d 0c ff ff ff 	movzwl -0xf4(%rbp),%ecx
     d22:	89 44 24 20          	mov    %eax,0x20(%rsp)
     d26:	66 41 c1 c2 08       	rol    $0x8,%r10w
     d2b:	66 c1 c7 08          	rol    $0x8,%di
     d2f:	4c 89 9d a0 fe ff ff 	mov    %r11,-0x160(%rbp)
     d36:	41 0f b7 c2          	movzwl %r10w,%eax
     d3a:	66 c1 c6 08          	rol    $0x8,%si
     d3e:	66 c1 c2 08          	rol    $0x8,%dx
     d42:	89 44 24 18          	mov    %eax,0x18(%rsp)
     d46:	0f b7 c7             	movzwl %di,%eax
     d49:	66 41 c1 c1 08       	rol    $0x8,%r9w
     d4e:	89 44 24 10          	mov    %eax,0x10(%rsp)
     d52:	0f b7 c6             	movzwl %si,%eax
     d55:	66 41 c1 c0 08       	rol    $0x8,%r8w
     d5a:	89 44 24 08          	mov    %eax,0x8(%rsp)
     d5e:	66 c1 c1 08          	rol    $0x8,%cx
     d62:	0f b7 c2             	movzwl %dx,%eax
     d65:	4c 89 df             	mov    %r11,%rdi
     d68:	0f b7 c9             	movzwl %cx,%ecx
     d6b:	89 04 24             	mov    %eax,(%rsp)
     d6e:	45 0f b7 c9          	movzwl %r9w,%r9d
     d72:	45 0f b7 c0          	movzwl %r8w,%r8d
     d76:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
     d7d:	be 40 00 00 00       	mov    $0x40,%esi
     d82:	31 c0                	xor    %eax,%eax
     d84:	e8 00 00 00 00       	callq  d89 <monitor_connect_hook+0x2f9>
     d89:	0f b7 8d 06 ff ff ff 	movzwl -0xfa(%rbp),%ecx
     d90:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     d97:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
     d9e:	be 10 00 00 00       	mov    $0x10,%esi
     da3:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
     daa:	48 89 c7             	mov    %rax,%rdi
     dad:	31 c0                	xor    %eax,%eax
     daf:	66 c1 c1 08          	rol    $0x8,%cx
     db3:	0f b7 c9             	movzwl %cx,%ecx
     db6:	e8 00 00 00 00       	callq  dbb <monitor_connect_hook+0x32b>
                     sip, "\n", sport);
     dbb:	c7 85 b4 fe ff ff 06 	movl   $0x6,-0x14c(%rbp)
     dc2:	00 00 00 
     dc5:	e9 46 01 00 00       	jmpq   f10 <monitor_connect_hook+0x480>
     dca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
     dd0:	48 8d 95 ec fe ff ff 	lea    -0x114(%rbp),%rdx
     dd7:	48 8d b5 e8 fe ff ff 	lea    -0x118(%rbp),%rsi
     dde:	89 df                	mov    %ebx,%edi
}
     de0:	e8 fb f2 ff ff       	callq  e0 <sockfd_lookup_light>
                     sip, "\n", sport);
     de5:	48 85 c0             	test   %rax,%rax
     de8:	49 89 c5             	mov    %rax,%r13
                get_data_alignment(strlen(current->comm) +
     deb:	0f 84 ff 03 00 00    	je     11f0 <monitor_connect_hook+0x760>
     df1:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
     df8:	48 8d b5 f4 fe ff ff 	lea    -0x10c(%rbp),%rsi
     dff:	48 89 c7             	mov    %rax,%rdi
            {
     e02:	e8 00 00 00 00       	callq  e07 <monitor_connect_hook+0x377>
     e07:	0f b7 8d f6 fe ff ff 	movzwl -0x10a(%rbp),%ecx
     e0e:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
                if (current->mm->exe_file)
     e15:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
     e1c:	be 10 00 00 00       	mov    $0x10,%esi
                    if (pathname)
     e21:	48 89 c7             	mov    %rax,%rdi
     e24:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
     e2b:	31 c0                	xor    %eax,%eax
     e2d:	66 c1 c1 08          	rol    $0x8,%cx
     e31:	0f b7 c9             	movzwl %cx,%ecx
     e34:	e8 00 00 00 00       	callq  e39 <monitor_connect_hook+0x3a9>
                    {
     e39:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     e3d:	44 0f b6 85 f9 fe ff 	movzbl -0x107(%rbp),%r8d
     e44:	ff 
     e45:	44 0f b6 8d fa fe ff 	movzbl -0x106(%rbp),%r9d
     e4c:	ff 
     e4d:	0f b6 8d f8 fe ff ff 	movzbl -0x108(%rbp),%ecx
     e54:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
     e5b:	be 40 00 00 00       	mov    $0x40,%esi
}
     e60:	48 89 c7             	mov    %rax,%rdi
                    {
     e63:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
                        pathname = memset(pathname, '\0', PATH_MAX);
     e6a:	0f b6 85 fb fe ff ff 	movzbl -0x105(%rbp),%eax
     e71:	89 04 24             	mov    %eax,(%rsp)
     e74:	31 c0                	xor    %eax,%eax
     e76:	e8 00 00 00 00       	callq  e7b <monitor_connect_hook+0x3eb>
     e7b:	44 8b 85 ec fe ff ff 	mov    -0x114(%rbp),%r8d
     e82:	49 8b 7d 18          	mov    0x18(%r13),%rdi
     e86:	45 85 c0             	test   %r8d,%r8d
     e89:	0f 85 e6 03 00 00    	jne    1275 <monitor_connect_hook+0x7e5>
     e8f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     e96:	44 0f b6 8d 0a ff ff 	movzbl -0xf6(%rbp),%r9d
     e9d:	ff 
     e9e:	44 0f b6 85 09 ff ff 	movzbl -0xf7(%rbp),%r8d
     ea5:	ff 
     ea6:	0f b6 8d 08 ff ff ff 	movzbl -0xf8(%rbp),%ecx
     ead:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
                        final_path = d_path(&current->mm->exe_file->f_path, pathname, PATH_MAX);
     eb4:	be 40 00 00 00       	mov    $0x40,%esi
     eb9:	48 89 c7             	mov    %rax,%rdi
     ebc:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
                    {
     ec3:	0f b6 85 0b ff ff ff 	movzbl -0xf5(%rbp),%eax
     eca:	89 04 24             	mov    %eax,(%rsp)
     ecd:	31 c0                	xor    %eax,%eax
     ecf:	e8 00 00 00 00       	callq  ed4 <monitor_connect_hook+0x444>
     ed4:	0f b7 8d 06 ff ff ff 	movzwl -0xfa(%rbp),%ecx
     edb:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     ee2:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
     ee9:	be 10 00 00 00       	mov    $0x10,%esi
     eee:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
     ef5:	48 89 c7             	mov    %rax,%rdi
     ef8:	31 c0                	xor    %eax,%eax
     efa:	66 c1 c1 08          	rol    $0x8,%cx
     efe:	0f b7 c9             	movzwl %cx,%ecx
     f01:	e8 00 00 00 00       	callq  f06 <monitor_connect_hook+0x476>
                        pathname = kzalloc(PATH_MAX, GFP_ATOMIC);
     f06:	c7 85 b4 fe ff ff 04 	movl   $0x4,-0x14c(%rbp)
     f0d:	00 00 00 
     f10:	65 48 8b 04 25 00 00 	mov    %gs:0x0,%rax
     f17:	00 00 
     f19:	48 83 b8 70 04 00 00 	cmpq   $0x0,0x470(%rax)
     f20:	00 
     f21:	0f 84 11 03 00 00    	je     1238 <monitor_connect_hook+0x7a8>
     f27:	48 8b 80 68 04 00 00 	mov    0x468(%rax),%rax
     f2e:	48 83 b8 38 03 00 00 	cmpq   $0x0,0x338(%rax)
     f35:	00 
            if (current->active_mm)
     f36:	0f 84 fc 02 00 00    	je     1238 <monitor_connect_hook+0x7a8>
     f3c:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # f43 <monitor_connect_hook+0x4b3>
     f43:	48 85 f6             	test   %rsi,%rsi
     f46:	0f 84 fc 02 00 00    	je     1248 <monitor_connect_hook+0x7b8>
            ktime_result_str = kzalloc(16, GFP_ATOMIC);
     f4c:	40 f6 c6 01          	test   $0x1,%sil
     f50:	48 89 f7             	mov    %rsi,%rdi
     f53:	ba 00 10 00 00       	mov    $0x1000,%edx
            send_msg_to_user(SEND_TYPE, ktime_result_str, 1);
     f58:	0f 85 2c 03 00 00    	jne    128a <monitor_connect_hook+0x7fa>
     f5e:	40 f6 c7 02          	test   $0x2,%dil
     f62:	0f 85 44 03 00 00    	jne    12ac <monitor_connect_hook+0x81c>
     f68:	40 f6 c7 04          	test   $0x4,%dil
        }
     f6c:	0f 85 28 03 00 00    	jne    129a <monitor_connect_hook+0x80a>
     f72:	89 d1                	mov    %edx,%ecx
     f74:	31 c0                	xor    %eax,%eax
     f76:	c1 e9 03             	shr    $0x3,%ecx
     f79:	f6 c2 04             	test   $0x4,%dl

     f7c:	f3 48 ab             	rep stos %rax,%es:(%rdi)
     f7f:	74 0a                	je     f8b <monitor_connect_hook+0x4fb>
     f81:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
     f87:	48 83 c7 04          	add    $0x4,%rdi
     f8b:	f6 c2 02             	test   $0x2,%dl
     f8e:	74 0a                	je     f9a <monitor_connect_hook+0x50a>
     f90:	31 c0                	xor    %eax,%eax
     f92:	48 83 c7 02          	add    $0x2,%rdi
     f96:	66 89 47 fe          	mov    %ax,-0x2(%rdi)
     f9a:	83 e2 01             	and    $0x1,%edx
     f9d:	74 03                	je     fa2 <monitor_connect_hook+0x512>
     f9f:	c6 07 00             	movb   $0x0,(%rdi)
     fa2:	65 48 8b 04 25 00 00 	mov    %gs:0x0,%rax
     fa9:	00 00 
     fab:	48 8b 80 68 04 00 00 	mov    0x468(%rax),%rax
     fb2:	ba 00 10 00 00       	mov    $0x1000,%edx
     fb7:	48 89 35 00 00 00 00 	mov    %rsi,0x0(%rip)        # fbe <monitor_connect_hook+0x52e>
     fbe:	48 8b b8 38 03 00 00 	mov    0x338(%rax),%rdi
     fc5:	48 83 c7 10          	add    $0x10,%rdi
     fc9:	e8 00 00 00 00       	callq  fce <monitor_connect_hook+0x53e>
     fce:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
     fd5:	65 4c 8b 34 25 00 00 	mov    %gs:0x0,%r14
     fdc:	00 00 
#if (SAFE_EXIT == 1)
     fde:	4d 8d ae 78 06 00 00 	lea    0x678(%r14),%r13
     fe5:	4c 89 ef             	mov    %r13,%rdi

     fe8:	e8 00 00 00 00       	callq  fed <monitor_connect_hook+0x55d>
     fed:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
#if (SAFE_EXIT == 1)
     ff4:	49 8b 86 60 07 00 00 	mov    0x760(%r14),%rax
     ffb:	48 8b 78 08          	mov    0x8(%rax),%rdi
     fff:	48 83 c7 45          	add    $0x45,%rdi
    1003:	e8 00 00 00 00       	callq  1008 <monitor_connect_hook+0x578>
    1008:	4c 89 ef             	mov    %r13,%rdi
    100b:	49 89 c7             	mov    %rax,%r15
    unsigned long ptr;
    100e:	e8 00 00 00 00       	callq  1013 <monitor_connect_hook+0x583>
    1013:	48 8b bd e0 fe ff ff 	mov    -0x120(%rbp),%rdi
    101a:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    1021:	e8 00 00 00 00       	callq  1026 <monitor_connect_hook+0x596>
    unsigned long *p;
    1026:	48 8b b5 d0 fe ff ff 	mov    -0x130(%rbp),%rsi
    102d:	46 8d 94 3e ac 00 00 	lea    0xac(%rsi,%r15,1),%r10d
    1034:	00 
    1035:	44 03 95 d8 fe ff ff 	add    -0x128(%rbp),%r10d
    103c:	be 20 80 00 00       	mov    $0x8020,%esi
    for (ptr = (unsigned long)sys_close;
    1041:	41 01 c2             	add    %eax,%r10d
    1044:	4d 63 d2             	movslq %r10d,%r10
    1047:	4c 89 d7             	mov    %r10,%rdi
    104a:	4c 89 95 c8 fe ff ff 	mov    %r10,-0x138(%rbp)
    1051:	e8 00 00 00 00       	callq  1056 <monitor_connect_hook+0x5c6>
    unsigned long ptr;
    1056:	49 89 c7             	mov    %rax,%r15
    1059:	49 8b 86 60 07 00 00 	mov    0x760(%r14),%rax
    1060:	41 8b b6 a8 04 00 00 	mov    0x4a8(%r14),%esi
    1067:	48 8b 40 08          	mov    0x8(%rax),%rax
    106b:	89 b5 d0 fe ff ff    	mov    %esi,-0x130(%rbp)
    1071:	48 8d 50 45          	lea    0x45(%rax),%rdx
         ptr < (unsigned long)&loops_per_jiffy;
    1075:	49 8b 86 e8 04 00 00 	mov    0x4e8(%r14),%rax
    107c:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
    1083:	48 8b b8 38 05 00 00 	mov    0x538(%rax),%rdi
    return NULL;
    108a:	e8 00 00 00 00       	callq  108f <monitor_connect_hook+0x5ff>
    108f:	49 8b 8e 68 06 00 00 	mov    0x668(%r14),%rcx
         ptr += sizeof(void *))
    1096:	48 8b b5 c0 fe ff ff 	mov    -0x140(%rbp),%rsi
    109d:	4c 89 ff             	mov    %r15,%rdi
    10a0:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
    10a7:	49 c7 c1 00 00 00 00 	mov    $0x0,%r9
    return NULL;
    10ae:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8
         ptr += sizeof(void *))
    10b5:	8b 49 04             	mov    0x4(%rcx),%ecx
    10b8:	48 89 b4 24 c8 00 00 	mov    %rsi,0xc8(%rsp)
    10bf:	00 
    10c0:	48 8b b5 b8 fe ff ff 	mov    -0x148(%rbp),%rsi
    10c7:	48 89 94 24 a8 00 00 	mov    %rdx,0xa8(%rsp)
    10ce:	00 
    10cf:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    10d6:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
    10dd:	00 00 00 00 00 
    10e2:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
    10e9:	00 00 00 00 00 
    10ee:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
    10f5:	00 00 00 00 00 
    10fa:	4c 89 ac 24 98 00 00 	mov    %r13,0x98(%rsp)
    1101:	00 
    1102:	48 89 b4 24 b8 00 00 	mov    %rsi,0xb8(%rsp)
    1109:	00 
    110a:	8b b5 d0 fe ff ff    	mov    -0x130(%rbp),%esi
    1110:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
    1117:	00 00 00 00 00 
    111c:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
    1123:	00 00 00 00 00 
    1128:	89 44 24 78          	mov    %eax,0x78(%rsp)
    112c:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
    1133:	00 00 
    1135:	89 b4 24 88 00 00 00 	mov    %esi,0x88(%rsp)
    113c:	49 8b 86 b8 04 00 00 	mov    0x4b8(%r14),%rax
    1143:	8b 80 a4 04 00 00    	mov    0x4a4(%rax),%eax
    1149:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
    1150:	00 00 
    1152:	89 44 24 68          	mov    %eax,0x68(%rsp)
    1156:	41 8b 86 a4 04 00 00 	mov    0x4a4(%r14),%eax
    115d:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
    1164:	00 00 
    1166:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
    116d:	00 00 
    116f:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
    1176:	00 00 
    1178:	89 44 24 58          	mov    %eax,0x58(%rsp)
    117c:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    1183:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    1188:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    118f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    1194:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    119b:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    11a0:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
    11a7:	00 00 
    11a9:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
    11af:	4c 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%r10
    11b6:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
    11ba:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
    11c1:	00 00 
    11c3:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
    11ca:	00 
    11cb:	89 44 24 08          	mov    %eax,0x8(%rsp)
    11cf:	4c 89 d6             	mov    %r10,%rsi
    11d2:	31 c0                	xor    %eax,%eax
    11d4:	e8 00 00 00 00       	callq  11d9 <monitor_connect_hook+0x749>
    11d9:	4c 89 ff             	mov    %r15,%rdi
    11dc:	e8 9f f0 ff ff       	callq  280 <send_msg_to_user_memshare.constprop.5>
    11e1:	e9 95 f9 ff ff       	jmpq   b7b <monitor_connect_hook+0xeb>
    11e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    11ed:	00 00 00 
    11f0:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    11f7:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
    11fe:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1202:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)

    1209:	e9 81 fc ff ff       	jmpq   e8f <monitor_connect_hook+0x3ff>
    120e:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    1215:	0f b7 85 1a ff ff ff 	movzwl -0xe6(%rbp),%eax
    121c:	48 89 95 c0 fe ff ff 	mov    %rdx,-0x140(%rbp)
    1223:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    1227:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
    122e:	e9 ad fa ff ff       	jmpq   ce0 <monitor_connect_hook+0x250>
    1233:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    1238:	48 c7 85 e0 fe ff ff 	movq   $0x0,-0x120(%rbp)
    123f:	00 00 00 00 
    1243:	e9 8d fd ff ff       	jmpq   fd5 <monitor_connect_hook+0x545>
                     current->comm, "\n", current->nsproxy->uts_ns->name.nodename, "\n",
    1248:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 124f <monitor_connect_hook+0x7bf>
    124f:	ba 00 10 00 00       	mov    $0x1000,%edx
    1254:	be 20 80 00 00       	mov    $0x8020,%esi
    1259:	e8 00 00 00 00       	callq  125e <monitor_connect_hook+0x7ce>
    125e:	48 c7 85 e0 fe ff ff 	movq   $0x0,-0x120(%rbp)
    1265:	00 00 00 00 

    1269:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1270 <monitor_connect_hook+0x7e0>
    1270:	e9 60 fd ff ff       	jmpq   fd5 <monitor_connect_hook+0x545>
    1275:	e8 00 00 00 00       	callq  127a <monitor_connect_hook+0x7ea>
    127a:	e9 10 fc ff ff       	jmpq   e8f <monitor_connect_hook+0x3ff>
    127f:	90                   	nop
    1280:	e8 00 00 00 00       	callq  1285 <monitor_connect_hook+0x7f5>
    1285:	e9 4f fa ff ff       	jmpq   cd9 <monitor_connect_hook+0x249>
    128a:	c6 06 00             	movb   $0x0,(%rsi)
    128d:	48 8d 7e 01          	lea    0x1(%rsi),%rdi
    1291:	66 ba ff 0f          	mov    $0xfff,%dx
    1295:	e9 c4 fc ff ff       	jmpq   f5e <monitor_connect_hook+0x4ce>
    return ori_connect_syscall_res;
    129a:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
    12a0:	83 ea 04             	sub    $0x4,%edx
    12a3:	48 83 c7 04          	add    $0x4,%rdi
    12a7:	e9 c6 fc ff ff       	jmpq   f72 <monitor_connect_hook+0x4e2>
    12ac:	31 c9                	xor    %ecx,%ecx
    12ae:	48 83 c7 02          	add    $0x2,%rdi
    12b2:	83 ea 02             	sub    $0x2,%edx
    12b5:	66 89 4f fe          	mov    %cx,-0x2(%rdi)
    12b9:	e9 aa fc ff ff       	jmpq   f68 <monitor_connect_hook+0x4d8>

    12be:	e8 00 00 00 00       	callq  12c3 <monitor_connect_hook+0x833>
    12c3:	0f 1f 00             	nopl   (%rax)
    12c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    12cd:	00 00 00 

00000000000012d0 <checkCPUendian>:
    12d0:	e8 00 00 00 00       	callq  12d5 <checkCPUendian+0x5>
    12d5:	55                   	push   %rbp
    12d6:	31 c0                	xor    %eax,%eax
    12d8:	48 89 e5             	mov    %rsp,%rbp
    12db:	5d                   	pop    %rbp
    12dc:	c3                   	retq   
    12dd:	0f 1f 00             	nopl   (%rax)

00000000000012e0 <Ntohs>:
    12e0:	e8 00 00 00 00       	callq  12e5 <Ntohs+0x5>
    12e5:	55                   	push   %rbp
    12e6:	89 f8                	mov    %edi,%eax
    12e8:	66 c1 c0 08          	rol    $0x8,%ax
    12ec:	48 89 e5             	mov    %rsp,%rbp
        pr_err("REGISTER_CHRDEV_ERROR\n");
    12ef:	5d                   	pop    %rbp
    12f0:	c3                   	retq   
    12f1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    12f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    12fd:	00 00 00 

0000000000001300 <monitor_execve_hook>:
    union {
    1300:	e8 00 00 00 00       	callq  1305 <monitor_execve_hook+0x5>
    1305:	83 3d 00 00 00 00 ff 	cmpl   $0xffffffff,0x0(%rip)        # 130c <monitor_execve_hook+0xc>

    130c:	0f 84 f6 06 00 00    	je     1a08 <monitor_execve_hook+0x708>
    return checkCPUendian() ? n : BigLittleSwap16(n);
    1312:	55                   	push   %rbp
    1313:	65 48 8b 04 25 00 00 	mov    %gs:0x0,%rax
    131a:	00 00 
    131c:	48 89 e5             	mov    %rsp,%rbp

    131f:	41 57                	push   %r15
    1321:	41 56                	push   %r14
    1323:	41 55                	push   %r13
    1325:	41 54                	push   %r12
    1327:	49 89 fc             	mov    %rdi,%r12
    132a:	53                   	push   %rbx
    132b:	48 89 f3             	mov    %rsi,%rbx
    132e:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
        abs_path = path->name;
    1335:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 133c <monitor_execve_hook+0x3c>
    133c:	48 8b 80 58 07 00 00 	mov    0x758(%rax),%rax
    1343:	48 85 d2             	test   %rdx,%rdx
    1346:	4c 8b 68 08          	mov    0x8(%rax),%r13
    134a:	0f 84 10 07 00 00    	je     1a60 <monitor_execve_hook+0x760>
    struct filename *path;
    1350:	f6 c2 01             	test   $0x1,%dl
    1353:	48 89 d7             	mov    %rdx,%rdi
    1356:	be 64 00 00 00       	mov    $0x64,%esi
    135b:	0f 85 21 07 00 00    	jne    1a82 <monitor_execve_hook+0x782>
    1361:	40 f6 c7 02          	test   $0x2,%dil
    }
    1365:	0f 85 26 07 00 00    	jne    1a91 <monitor_execve_hook+0x791>
    136b:	40 f6 c7 04          	test   $0x4,%dil
        pname_buf = memset(pname_buf, '\0', flen);
    136f:	0f 85 30 07 00 00    	jne    1aa5 <monitor_execve_hook+0x7a5>
    }
    1375:	89 f1                	mov    %esi,%ecx
        pname_buf = memset(pname_buf, '\0', flen);
    1377:	31 c0                	xor    %eax,%eax
    1379:	c1 e9 03             	shr    $0x3,%ecx
    }
    137c:	40 f6 c6 04          	test   $0x4,%sil
    else
    1380:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    1383:	0f 85 67 03 00 00    	jne    16f0 <monitor_execve_hook+0x3f0>
    1389:	40 f6 c6 02          	test   $0x2,%sil
    138d:	0f 85 3d 03 00 00    	jne    16d0 <monitor_execve_hook+0x3d0>
    1393:	83 e6 01             	and    $0x1,%esi
    1396:	0f 85 24 03 00 00    	jne    16c0 <monitor_execve_hook+0x3c0>
    139c:	48 89 15 00 00 00 00 	mov    %rdx,0x0(%rip)        # 13a3 <monitor_execve_hook+0xa3>
    13a3:	49 8b 45 08          	mov    0x8(%r13),%rax
    13a7:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
    13ae:	00 
    13af:	48 8b 38             	mov    (%rax),%rdi
    13b2:	48 85 ff             	test   %rdi,%rdi
    13b5:	74 3a                	je     13f1 <monitor_execve_hook+0xf1>
    13b7:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 13be <monitor_execve_hook+0xbe>
    13be:	48 83 c7 10          	add    $0x10,%rdi
    13c2:	ba 64 00 00 00       	mov    $0x64,%edx
    13c7:	e8 00 00 00 00       	callq  13cc <monitor_execve_hook+0xcc>
    13cc:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 13d3 <monitor_execve_hook+0xd3>
    if (argv_len < 0)
    13d3:	ba 64 00 00 00       	mov    $0x64,%edx
    if (netlink_pid == -1 && share_mem_flag == -1)
    13d8:	be 20 80 00 00       	mov    $0x8020,%esi
    13dd:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    if (argv_len < 0)
    13e1:	e8 00 00 00 00       	callq  13e6 <monitor_execve_hook+0xe6>
    13e6:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 13ed <monitor_execve_hook+0xed>
        goto err;
    13ed:	49 8b 45 08          	mov    0x8(%r13),%rax
    13f1:	48 8b 78 08          	mov    0x8(%rax),%rdi
    13f5:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    13fc:	00 
    13fd:	48 85 ff             	test   %rdi,%rdi
    1400:	74 3a                	je     143c <monitor_execve_hook+0x13c>
    1402:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1409 <monitor_execve_hook+0x109>
    1409:	48 83 c7 10          	add    $0x10,%rdi
    140d:	ba 64 00 00 00       	mov    $0x64,%edx
    1412:	e8 00 00 00 00       	callq  1417 <monitor_execve_hook+0x117>

    1417:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 141e <monitor_execve_hook+0x11e>
    141e:	ba 64 00 00 00       	mov    $0x64,%edx
        goto err;
    1423:	be 20 80 00 00       	mov    $0x8020,%esi
        return 0;
    1428:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    142c:	e8 00 00 00 00       	callq  1431 <monitor_execve_hook+0x131>
        goto err;
    1431:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1438 <monitor_execve_hook+0x138>

    1438:	49 8b 45 08          	mov    0x8(%r13),%rax
    143c:	48 8b 78 10          	mov    0x10(%rax),%rdi
    1440:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
    1447:	00 
    1448:	48 85 ff             	test   %rdi,%rdi
    144b:	74 36                	je     1483 <monitor_execve_hook+0x183>
    144d:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1454 <monitor_execve_hook+0x154>
    1454:	48 83 c7 10          	add    $0x10,%rdi
    1458:	ba 64 00 00 00       	mov    $0x64,%edx
    145d:	e8 00 00 00 00       	callq  1462 <monitor_execve_hook+0x162>
    for (i = 0; i < argv_len; i++)
    1462:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1469 <monitor_execve_hook+0x169>
    1469:	ba 64 00 00 00       	mov    $0x64,%edx
        if (IS_ERR(native))
    146e:	be 20 80 00 00       	mov    $0x8020,%esi

    1473:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    1477:	e8 00 00 00 00       	callq  147c <monitor_execve_hook+0x17c>
        if (IS_ERR(native))
    147c:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1483 <monitor_execve_hook+0x183>
            goto err;
    1483:	4c 89 e7             	mov    %r12,%rdi
    1486:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 148d <monitor_execve_hook+0x18d>
    148d:	e8 00 00 00 00       	callq  1492 <monitor_execve_hook+0x192>
    1492:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
    1498:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    149c:	0f 87 60 06 00 00    	ja     1b02 <monitor_execve_hook+0x802>
    14a2:	48 8b 00             	mov    (%rax),%rax
    14a5:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    14a9:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 14b0 <monitor_execve_hook+0x1b0>

    14b0:	48 85 f6             	test   %rsi,%rsi
            goto err;
    14b3:	0f 84 57 05 00 00    	je     1a10 <monitor_execve_hook+0x710>
    14b9:	40 f6 c6 01          	test   $0x1,%sil
    14bd:	48 89 f7             	mov    %rsi,%rdi
    14c0:	ba 00 01 00 00       	mov    $0x100,%edx

    14c5:	0f 85 fe 05 00 00    	jne    1ac9 <monitor_execve_hook+0x7c9>
            goto err;
    14cb:	40 f6 c7 02          	test   $0x2,%dil

    14cf:	0f 85 04 06 00 00    	jne    1ad9 <monitor_execve_hook+0x7d9>
            break;
    14d5:	40 f6 c7 04          	test   $0x4,%dil
        offset += len - 1;
    14d9:	0f 85 d8 05 00 00    	jne    1ab7 <monitor_execve_hook+0x7b7>
    14df:	89 d1                	mov    %edx,%ecx
    14e1:	31 c0                	xor    %eax,%eax
    14e3:	c1 e9 03             	shr    $0x3,%ecx
    14e6:	f6 c2 04             	test   $0x4,%dl
        offset += 1;
    14e9:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    14ec:	0f 85 b6 01 00 00    	jne    16a8 <monitor_execve_hook+0x3a8>
    14f2:	f6 c2 02             	test   $0x2,%dl
    14f5:	0f 85 95 01 00 00    	jne    1690 <monitor_execve_hook+0x390>
    14fb:	83 e2 01             	and    $0x1,%edx
    14fe:	0f 85 84 01 00 00    	jne    1688 <monitor_execve_hook+0x388>
    1504:	65 48 8b 04 25 00 00 	mov    %gs:0x0,%rax
    150b:	00 00 
    150d:	48 8b 80 50 07 00 00 	mov    0x750(%rax),%rax
    1514:	ba ff 00 00 00       	mov    $0xff,%edx
    1519:	48 89 35 00 00 00 00 	mov    %rsi,0x0(%rip)        # 1520 <monitor_execve_hook+0x220>
    1520:	48 8b 78 30          	mov    0x30(%rax),%rdi
    1524:	e8 00 00 00 00       	callq  1529 <monitor_execve_hook+0x229>
    1529:	48 85 db             	test   %rbx,%rbx
    152c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    1530:	0f 84 0a 05 00 00    	je     1a40 <monitor_execve_hook+0x740>
    1536:	45 31 e4             	xor    %r12d,%r12d
    1539:	65 4c 8b 2c 25 00 00 	mov    %gs:0x0,%r13
    1540:	00 00 
    }
    1542:	eb 37                	jmp    157b <monitor_execve_hook+0x27b>
    1544:	0f 1f 40 00          	nopl   0x0(%rax)
    1548:	48 81 fa 00 f0 ff ff 	cmp    $0xfffffffffffff000,%rdx
        offset += 1;
    154f:	0f 87 c3 01 00 00    	ja     1718 <monitor_execve_hook+0x418>
    }
    1555:	41 81 fc ff ff ff 7f 	cmp    $0x7fffffff,%r12d
    155c:	0f 84 b6 01 00 00    	je     1718 <monitor_execve_hook+0x418>
    {
    1562:	49 8b 45 08          	mov    0x8(%r13),%rax
    1566:	41 83 c4 01          	add    $0x1,%r12d
    156a:	48 8b 40 10          	mov    0x10(%rax),%rax
    156e:	a8 04                	test   $0x4,%al
    1570:	0f 85 90 01 00 00    	jne    1706 <monitor_execve_hook+0x406>
    1576:	e8 00 00 00 00       	callq  157b <monitor_execve_hook+0x27b>
                return -EFAULT;
    157b:	49 63 c4             	movslq %r12d,%rax
    157e:	48 8d 04 c3          	lea    (%rbx,%rax,8),%rax
    1582:	e8 00 00 00 00       	callq  1587 <monitor_execve_hook+0x287>
                return -E2BIG;
    1587:	85 c0                	test   %eax,%eax
    1589:	0f 85 89 01 00 00    	jne    1718 <monitor_execve_hook+0x418>
    158f:	48 85 d2             	test   %rdx,%rdx
    1592:	75 b4                	jne    1548 <monitor_execve_hook+0x248>
    1594:	45 85 e4             	test   %r12d,%r12d
            if (fatal_signal_pending(current))
    1597:	0f 88 7b 01 00 00    	js     1718 <monitor_execve_hook+0x418>
    159d:	44 89 e0             	mov    %r12d,%eax
    15a0:	be 20 80 00 00       	mov    $0x8020,%esi
    15a5:	c1 e0 04             	shl    $0x4,%eax
        }
    15a8:	48 63 f8             	movslq %eax,%rdi
        return ERR_PTR(-EFAULT);
    15ab:	89 45 d0             	mov    %eax,-0x30(%rbp)
    15ae:	e8 00 00 00 00       	callq  15b3 <monitor_execve_hook+0x2b3>
    15b3:	48 85 c0             	test   %rax,%rax
    15b6:	49 89 c5             	mov    %rax,%r13
    15b9:	0f 84 59 01 00 00    	je     1718 <monitor_execve_hook+0x418>
                break;
    15bf:	45 85 e4             	test   %r12d,%r12d
    15c2:	0f 84 70 01 00 00    	je     1738 <monitor_execve_hook+0x438>
                           strlen(current->nsproxy->uts_ns->name.nodename) + 128);
    15c8:	48 89 d8             	mov    %rbx,%rax
    15cb:	e8 00 00 00 00       	callq  15d0 <monitor_execve_hook+0x2d0>
    15d0:	85 c0                	test   %eax,%eax
    15d2:	0f 85 97 00 00 00    	jne    166f <monitor_execve_hook+0x36f>
    snprintf(result_str, result_str_len,
    15d8:	48 81 fa 00 f0 ff ff 	cmp    $0xfffffffffffff000,%rdx
    15df:	0f 87 8a 00 00 00    	ja     166f <monitor_execve_hook+0x36f>
             "%d%s%s%s%s%s%s%s%s%s%d%s%d%s%d%s%d%s%s%s%s",
    15e5:	41 8d 44 24 ff       	lea    -0x1(%r12),%eax
    15ea:	48 83 c3 08          	add    $0x8,%rbx
    15ee:	49 89 d7             	mov    %rdx,%r15
             current->real_parent->pid, "\n", pid_vnr(task_pgrp(current)),
    15f1:	45 31 e4             	xor    %r12d,%r12d
    15f4:	48 8d 04 c3          	lea    (%rbx,%rax,8),%rax
        return ERR_PTR(-EFAULT);
    15f8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    15fc:	eb 5d                	jmp    165b <monitor_execve_hook+0x35b>
    15fe:	66 90                	xchg   %ax,%ax
    1600:	41 8d 04 04          	lea    (%r12,%rax,1),%eax
    1604:	39 45 d0             	cmp    %eax,-0x30(%rbp)
    1607:	0f 8c 2b 01 00 00    	jl     1738 <monitor_execve_hook+0x438>

    160d:	49 63 fc             	movslq %r12d,%rdi
    1610:	49 63 d6             	movslq %r14d,%rdx
    1613:	4c 89 fe             	mov    %r15,%rsi
    1616:	4c 01 ef             	add    %r13,%rdi
    1619:	e8 00 00 00 00       	callq  161e <monitor_execve_hook+0x31e>
        return ERR_PTR(-EFAULT);
    161e:	48 85 c0             	test   %rax,%rax

    1621:	75 4c                	jne    166f <monitor_execve_hook+0x36f>
    1623:	47 8d 64 34 ff       	lea    -0x1(%r12,%r14,1),%r12d
    1628:	49 63 c4             	movslq %r12d,%rax
    162b:	41 83 c4 01          	add    $0x1,%r12d
    162f:	48 3b 5d c8          	cmp    -0x38(%rbp),%rbx
        kfree(argv_res_final);
    1633:	41 c6 44 05 00 20    	movb   $0x20,0x0(%r13,%rax,1)
    1639:	0f 84 f9 00 00 00    	je     1738 <monitor_execve_hook+0x438>

    163f:	48 89 d8             	mov    %rbx,%rax
    1642:	e8 00 00 00 00       	callq  1647 <monitor_execve_hook+0x347>
    1647:	85 c0                	test   %eax,%eax
    1649:	75 24                	jne    166f <monitor_execve_hook+0x36f>
    164b:	48 83 c3 08          	add    $0x8,%rbx
    164f:	48 81 fa 00 f0 ff ff 	cmp    $0xfffffffffffff000,%rdx
    snprintf(ktime_result_str, 16, "%ld", get_time_interval(stime));
    1656:	77 17                	ja     166f <monitor_execve_hook+0x36f>
    send_msg_to_user(SEND_TYPE, ktime_result_str, 1);
    1658:	49 89 d7             	mov    %rdx,%r15
#endif
    165b:	be 00 00 02 00       	mov    $0x20000,%esi
             current->real_parent->pid, "\n", pid_vnr(task_pgrp(current)),
    1660:	4c 89 ff             	mov    %r15,%rdi
    send_msg_to_user(SEND_TYPE, ktime_result_str, 1);
    1663:	e8 00 00 00 00       	callq  1668 <monitor_execve_hook+0x368>
    1668:	85 c0                	test   %eax,%eax
             current->real_parent->pid, "\n", pid_vnr(task_pgrp(current)),
    166a:	49 89 c6             	mov    %rax,%r14
    166d:	75 91                	jne    1600 <monitor_execve_hook+0x300>
        return ERR_PTR(-EFAULT);
    166f:	4c 89 ef             	mov    %r13,%rdi
    1672:	e8 00 00 00 00       	callq  1677 <monitor_execve_hook+0x377>
    1677:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    167e:	e9 9c 00 00 00       	jmpq   171f <monitor_execve_hook+0x41f>

    1683:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        return ERR_PTR(-EFAULT);
    1688:	c6 07 00             	movb   $0x0,(%rdi)
    if (argv_res)
    168b:	e9 74 fe ff ff       	jmpq   1504 <monitor_execve_hook+0x204>
    1690:	31 c9                	xor    %ecx,%ecx
    1692:	48 83 c7 02          	add    $0x2,%rdi
    1696:	66 89 4f fe          	mov    %cx,-0x2(%rdi)
    169a:	83 e2 01             	and    $0x1,%edx
        kfree(argv_res);
    169d:	0f 84 61 fe ff ff    	je     1504 <monitor_execve_hook+0x204>
             current->real_cred->uid.val, "\n", INIT_MODULE_TYPE, "\n", cwd,
    16a3:	eb e3                	jmp    1688 <monitor_execve_hook+0x388>
    16a5:	0f 1f 00             	nopl   (%rax)
             "\n", current->pid, "\n", current->real_parent->pid, "\n",
    16a8:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
    16ae:	48 83 c7 04          	add    $0x4,%rdi
    16b2:	f6 c2 02             	test   $0x2,%dl
    16b5:	0f 84 40 fe ff ff    	je     14fb <monitor_execve_hook+0x1fb>
        offset += 1;
    16bb:	eb d3                	jmp    1690 <monitor_execve_hook+0x390>
    16bd:	0f 1f 00             	nopl   (%rax)
    16c0:	c6 07 00             	movb   $0x0,(%rdi)
    16c3:	e9 d4 fc ff ff       	jmpq   139c <monitor_execve_hook+0x9c>
    16c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    16cf:	00 
    16d0:	45 31 c9             	xor    %r9d,%r9d
    16d3:	48 83 c7 02          	add    $0x2,%rdi
    16d7:	66 44 89 4f fe       	mov    %r9w,-0x2(%rdi)
    16dc:	83 e6 01             	and    $0x1,%esi
    16df:	0f 84 b7 fc ff ff    	je     139c <monitor_execve_hook+0x9c>
    16e5:	eb d9                	jmp    16c0 <monitor_execve_hook+0x3c0>
    16e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    16ee:	00 00 
    else
    16f0:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
    16f6:	48 83 c7 04          	add    $0x4,%rdi
    16fa:	40 f6 c6 02          	test   $0x2,%sil
    16fe:	0f 84 8f fc ff ff    	je     1393 <monitor_execve_hook+0x93>
    1704:	eb ca                	jmp    16d0 <monitor_execve_hook+0x3d0>
    1706:	41 f6 85 a1 07 00 00 	testb  $0x1,0x7a1(%r13)
    170d:	01 
    170e:	0f 84 62 fe ff ff    	je     1576 <monitor_execve_hook+0x276>
    1714:	0f 1f 40 00          	nopl   0x0(%rax)
    1718:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    171f:	48 81 c4 10 01 00 00 	add    $0x110,%rsp
    1726:	5b                   	pop    %rbx
    1727:	41 5c                	pop    %r12
    1729:	41 5d                	pop    %r13
    172b:	41 5e                	pop    %r14
    172d:	41 5f                	pop    %r15
    172f:	5d                   	pop    %rbp
    1730:	c3                   	retq   
    1731:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1738:	4c 89 6d d0          	mov    %r13,-0x30(%rbp)
    173c:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    1740:	45 31 e4             	xor    %r12d,%r12d
    1743:	eb 0b                	jmp    1750 <monitor_execve_hook+0x450>
    1745:	0f 1f 00             	nopl   (%rax)
             "\n", current->pid, "\n", current->real_parent->pid, "\n",
    1748:	48 8d 78 01          	lea    0x1(%rax),%rdi
    174c:	41 83 c4 01          	add    $0x1,%r12d
             pid_vnr(task_pgrp(current)), "\n", current->tgid, "\n",
    1750:	be 0a 00 00 00       	mov    $0xa,%esi
    1755:	e8 00 00 00 00       	callq  175a <monitor_execve_hook+0x45a>
    175a:	48 85 c0             	test   %rax,%rax
    175d:	75 e9                	jne    1748 <monitor_execve_hook+0x448>
    175f:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
    1763:	48 89 df             	mov    %rbx,%rdi
    1766:	e8 00 00 00 00       	callq  176b <monitor_execve_hook+0x46b>
    176b:	48 8d 78 01          	lea    0x1(%rax),%rdi

    176f:	be 20 80 00 00       	mov    $0x8020,%esi
    1774:	e8 00 00 00 00       	callq  1779 <monitor_execve_hook+0x479>
        return NULL;
    1779:	48 85 c0             	test   %rax,%rax
    if (!result)
    177c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    1780:	0f 84 74 03 00 00    	je     1afa <monitor_execve_hook+0x7fa>
    1786:	45 85 e4             	test   %r12d,%r12d
    1789:	0f 84 5e 03 00 00    	je     1aed <monitor_execve_hook+0x7ed>
    while (count--)
    178f:	49 89 c5             	mov    %rax,%r13
    1792:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1798:	48 89 df             	mov    %rbx,%rdi
    179b:	be 0a 00 00 00       	mov    $0xa,%esi
    17a0:	e8 00 00 00 00       	callq  17a5 <monitor_execve_hook+0x4a5>
    17a5:	49 89 c6             	mov    %rax,%r14
    17a8:	48 89 de             	mov    %rbx,%rsi
        ins = strstr(orig, rep);
    17ab:	4c 89 ef             	mov    %r13,%rdi
    17ae:	49 29 de             	sub    %rbx,%r14
    17b1:	4d 63 fe             	movslq %r14d,%r15
    17b4:	41 83 c6 01          	add    $0x1,%r14d
        tmp = strcpy(tmp, with) + len_with;
    17b8:	4c 89 fa             	mov    %r15,%rdx
    17bb:	4d 63 f6             	movslq %r14d,%r14
    17be:	e8 00 00 00 00       	callq  17c3 <monitor_execve_hook+0x4c3>
    17c3:	4c 01 f3             	add    %r14,%rbx
    17c6:	49 01 c7             	add    %rax,%r15
    }
    17c9:	b8 20 00 00 00       	mov    $0x20,%eax
    17ce:	41 83 ec 01          	sub    $0x1,%r12d
    17d2:	66 41 89 07          	mov    %ax,(%r15)
    17d6:	4d 8d 6f 01          	lea    0x1(%r15),%r13
    strcpy(tmp, orig);
    17da:	75 bc                	jne    1798 <monitor_execve_hook+0x498>
    17dc:	48 89 de             	mov    %rbx,%rsi

    17df:	4c 89 ef             	mov    %r13,%rdi
    strcpy(tmp, orig);
    17e2:	e8 00 00 00 00       	callq  17e7 <monitor_execve_hook+0x4e7>
}
    17e7:	4c 8b 75 c8          	mov    -0x38(%rbp),%r14
    17eb:	4c 89 f7             	mov    %r14,%rdi
    strcpy(tmp, orig);
    17ee:	e8 00 00 00 00       	callq  17f3 <monitor_execve_hook+0x4f3>
}
    17f3:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    strcpy(tmp, orig);
    17f7:	49 89 c4             	mov    %rax,%r12
    return result;
    17fa:	65 4c 8b 3c 25 00 00 	mov    %gs:0x0,%r15
    1801:	00 00 
    1803:	e8 00 00 00 00       	callq  1808 <monitor_execve_hook+0x508>
    1808:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
{
    180c:	48 89 c3             	mov    %rax,%rbx
    180f:	e8 00 00 00 00       	callq  1814 <monitor_execve_hook+0x514>
    1814:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    1818:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    if (argv_res)
    181c:	e8 00 00 00 00       	callq  1821 <monitor_execve_hook+0x521>
    1821:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    1825:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    1829:	e8 00 00 00 00       	callq  182e <monitor_execve_hook+0x52e>
    182e:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    1832:	49 89 c5             	mov    %rax,%r13
    1835:	e8 00 00 00 00       	callq  183a <monitor_execve_hook+0x53a>
        kfree(argv_res);
    183a:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    if (argv_res)
    183e:	49 8b 87 60 07 00 00 	mov    0x760(%r15),%rax
        kfree(argv_res);
    1845:	48 8b 78 08          	mov    0x8(%rax),%rdi
    1849:	48 83 c7 45          	add    $0x45,%rdi
    184d:	e8 00 00 00 00       	callq  1852 <monitor_execve_hook+0x552>
    1852:	41 8d 8c 1c 80 00 00 	lea    0x80(%r12,%rbx,1),%ecx
    1859:	00 
    185a:	8b 5d c8             	mov    -0x38(%rbp),%ebx
    185d:	44 8b 65 90          	mov    -0x70(%rbp),%r12d
    1861:	be 20 80 00 00       	mov    $0x8020,%esi
    1866:	01 cb                	add    %ecx,%ebx
    1868:	41 01 dc             	add    %ebx,%r12d
    186b:	45 01 e5             	add    %r12d,%r13d
    return -1;
    186e:	44 03 6d 88          	add    -0x78(%rbp),%r13d
    1872:	41 01 c5             	add    %eax,%r13d
    1875:	4d 63 ed             	movslq %r13d,%r13
    1878:	4c 89 ef             	mov    %r13,%rdi
    187b:	e8 00 00 00 00       	callq  1880 <monitor_execve_hook+0x580>
    1880:	48 89 c3             	mov    %rax,%rbx
    if (argv_res)
    1883:	49 8b 87 60 07 00 00 	mov    0x760(%r15),%rax
    188a:	4c 8b 60 08          	mov    0x8(%rax),%r12
    188e:	49 8b 87 e8 04 00 00 	mov    0x4e8(%r15),%rax
    1895:	48 8b b8 38 05 00 00 	mov    0x538(%rax),%rdi
    189c:	49 8d 4c 24 45       	lea    0x45(%r12),%rcx
    18a1:	45 8b a7 a8 04 00 00 	mov    0x4a8(%r15),%r12d
    18a8:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
    18ac:	e8 00 00 00 00       	callq  18b1 <monitor_execve_hook+0x5b1>
    18b1:	49 8b 8f 68 06 00 00 	mov    0x668(%r15),%rcx
    struct fdtable *files_table;
    18b8:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    18bc:	49 c7 c1 00 00 00 00 	mov    $0x0,%r9
    18c3:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8
asmlinkage long monitor_init_module_hook(void __user *umod, unsigned long len, const char __user *uargs)
    18ca:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    18d1:	48 89 df             	mov    %rbx,%rdi
    18d4:	8b 49 04             	mov    0x4(%rcx),%ecx
    18d7:	48 89 b4 24 b8 00 00 	mov    %rsi,0xb8(%rsp)
    18de:	00 
    18df:	49 8d b7 78 06 00 00 	lea    0x678(%r15),%rsi
    18e6:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
    18ed:	00 00 00 00 00 
    18f2:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
    18f9:	00 00 00 00 00 
    18fe:	48 89 b4 24 a8 00 00 	mov    %rsi,0xa8(%rsp)
    1905:	00 
    1906:	44 89 a4 24 98 00 00 	mov    %r12d,0x98(%rsp)
    190d:	00 
    190e:	4c 89 ee             	mov    %r13,%rsi
    1911:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
    1918:	00 00 00 00 00 
    191d:	89 84 24 88 00 00 00 	mov    %eax,0x88(%rsp)
    1924:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
    192b:	00 00 00 00 00 
    1930:	49 8b 87 b8 04 00 00 	mov    0x4b8(%r15),%rax
    1937:	8b 80 a4 04 00 00    	mov    0x4a4(%rax),%eax
    193d:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
    1944:	00 00 
    1946:	89 44 24 78          	mov    %eax,0x78(%rsp)
    194a:	41 8b 87 a4 04 00 00 	mov    0x4a4(%r15),%eax
    1951:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
    1958:	00 00 
    195a:	4c 89 74 24 58       	mov    %r14,0x58(%rsp)
    195f:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
    1966:	00 00 
    1968:	89 44 24 68          	mov    %eax,0x68(%rsp)
    196c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    1970:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
    1977:	00 00 
    1979:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    197e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    1982:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
    1989:	00 00 
    198b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    1990:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    1994:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
    199b:	00 00 
    199d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    19a2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    19a6:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
    19ad:	00 00 
    19af:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    19b4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    19b8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    19bd:	31 c0                	xor    %eax,%eax
    19bf:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
    19c6:	00 
    19c7:	e8 00 00 00 00       	callq  19cc <monitor_execve_hook+0x6cc>
    19cc:	48 89 df             	mov    %rbx,%rdi
    19cf:	e8 ac e8 ff ff       	callq  280 <send_msg_to_user_memshare.constprop.5>
    19d4:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    19d8:	e8 00 00 00 00       	callq  19dd <monitor_execve_hook+0x6dd>
    19dd:	4d 85 f6             	test   %r14,%r14
    19e0:	74 08                	je     19ea <monitor_execve_hook+0x6ea>
    19e2:	4c 89 f7             	mov    %r14,%rdi
    19e5:	e8 00 00 00 00       	callq  19ea <monitor_execve_hook+0x6ea>
    19ea:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 19f1 <monitor_execve_hook+0x6f1>
    19f1:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
    19f5:	e8 00 00 00 00       	callq  19fa <monitor_execve_hook+0x6fa>
    19fa:	31 c0                	xor    %eax,%eax

    19fc:	e9 1e fd ff ff       	jmpq   171f <monitor_execve_hook+0x41f>
    1a01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

    1a08:	31 c0                	xor    %eax,%eax
    1a0a:	c3                   	retq   
    1a0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        return orig_init_module(umod, len, uargs);
    1a10:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1a17 <monitor_execve_hook+0x717>

    1a17:	ba 00 01 00 00       	mov    $0x100,%edx
        init_module_buf = memset(init_module_buf, '\0', 100 * sizeof(char));
    1a1c:	be 20 80 00 00       	mov    $0x8020,%esi
    1a21:	e8 00 00 00 00       	callq  1a26 <monitor_execve_hook+0x726>
    1a26:	48 85 db             	test   %rbx,%rbx
    1a29:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1a30 <monitor_execve_hook+0x730>
    cwd = d_path(&files_path, init_module_buf, 100 * sizeof(char));
    1a30:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
    1a37:	00 
    }
    1a38:	0f 85 f8 fa ff ff    	jne    1536 <monitor_execve_hook+0x236>
             pid_vnr(task_pgrp(current)), "\n", current->tgid, "\n",
    1a3e:	66 90                	xchg   %ax,%ax
    1a40:	31 ff                	xor    %edi,%edi
    1a42:	be 20 80 00 00       	mov    $0x8020,%esi
    1a47:	e8 00 00 00 00       	callq  1a4c <monitor_execve_hook+0x74c>
    1a4c:	48 85 c0             	test   %rax,%rax
    1a4f:	0f 84 c3 fc ff ff    	je     1718 <monitor_execve_hook+0x418>
    1a55:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    result_str_len =
    1a59:	e9 de fc ff ff       	jmpq   173c <monitor_execve_hook+0x43c>
    1a5e:	66 90                	xchg   %ax,%ax

    1a60:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1a67 <monitor_execve_hook+0x767>
    1a67:	ba 64 00 00 00       	mov    $0x64,%edx
    {
    1a6c:	be 20 80 00 00       	mov    $0x8020,%esi
    1a71:	e8 00 00 00 00       	callq  1a76 <monitor_execve_hook+0x776>
    1a76:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1a7d <monitor_execve_hook+0x77d>
             "%d%s%s%s%s%s%s%s%s%s%d%s%d%s%d%s%d%s%s%s%s",
    1a7d:	e9 21 f9 ff ff       	jmpq   13a3 <monitor_execve_hook+0xa3>
    1a82:	c6 02 00             	movb   $0x0,(%rdx)
    1a85:	48 8d 7a 01          	lea    0x1(%rdx),%rdi
    1a89:	40 b6 63             	mov    $0x63,%sil
    1a8c:	e9 d0 f8 ff ff       	jmpq   1361 <monitor_execve_hook+0x61>
    1a91:	45 31 d2             	xor    %r10d,%r10d
    1a94:	48 83 c7 02          	add    $0x2,%rdi
    1a98:	83 ee 02             	sub    $0x2,%esi
    1a9b:	66 44 89 57 fe       	mov    %r10w,-0x2(%rdi)
    1aa0:	e9 c6 f8 ff ff       	jmpq   136b <monitor_execve_hook+0x6b>
    1aa5:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)

    1aab:	83 ee 04             	sub    $0x4,%esi
    1aae:	48 83 c7 04          	add    $0x4,%rdi
    else
    1ab2:	e9 be f8 ff ff       	jmpq   1375 <monitor_execve_hook+0x75>
    1ab7:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
    1abd:	83 ea 04             	sub    $0x4,%edx
    1ac0:	48 83 c7 04          	add    $0x4,%rdi
    1ac4:	e9 16 fa ff ff       	jmpq   14df <monitor_execve_hook+0x1df>
    1ac9:	c6 06 00             	movb   $0x0,(%rsi)
    1acc:	48 8d 7e 01          	lea    0x1(%rsi),%rdi
    1ad0:	66 ba ff 00          	mov    $0xff,%dx
    1ad4:	e9 f2 f9 ff ff       	jmpq   14cb <monitor_execve_hook+0x1cb>
    1ad9:	45 31 c0             	xor    %r8d,%r8d
    1adc:	48 83 c7 02          	add    $0x2,%rdi
    1ae0:	83 ea 02             	sub    $0x2,%edx
    1ae3:	66 44 89 47 fe       	mov    %r8w,-0x2(%rdi)
        offset += 1;
    1ae8:	e9 e8 f9 ff ff       	jmpq   14d5 <monitor_execve_hook+0x1d5>
    1aed:	4c 8b 6d c8          	mov    -0x38(%rbp),%r13
    1af1:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
    1af5:	e9 e2 fc ff ff       	jmpq   17dc <monitor_execve_hook+0x4dc>
    1afa:	45 31 f6             	xor    %r14d,%r14d
    1afd:	e9 e9 fc ff ff       	jmpq   17eb <monitor_execve_hook+0x4eb>
    1b02:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
    1b09:	00 
    1b0a:	e9 9a f9 ff ff       	jmpq   14a9 <monitor_execve_hook+0x1a9>
    1b0f:	90                   	nop

0000000000001b10 <monitor_connect_no_hook_time_test>:
    1b10:	e8 00 00 00 00       	callq  1b15 <monitor_connect_no_hook_time_test+0x5>
    1b15:	55                   	push   %rbp
    1b16:	48 89 e5             	mov    %rsp,%rbp
    1b19:	41 57                	push   %r15
    1b1b:	41 56                	push   %r14
        tmp = strcpy(tmp, with) + len_with;
    1b1d:	41 89 d6             	mov    %edx,%r14d
    1b20:	ba 10 00 00 00       	mov    $0x10,%edx
    1b25:	41 55                	push   %r13
    1b27:	41 54                	push   %r12
    1b29:	41 89 fc             	mov    %edi,%r12d
        len_front = ins - orig;
    1b2c:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    1b30:	53                   	push   %rbx
    1b31:	48 89 f3             	mov    %rsi,%rbx
            goto err;
    1b34:	48 83 ec 18          	sub    $0x18,%rsp
    1b38:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    1b3f:	00 00 
    ktime_t stime;
    1b41:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    1b45:	31 c0                	xor    %eax,%eax
    1b47:	e8 00 00 00 00       	callq  1b4c <monitor_connect_no_hook_time_test+0x3c>
    1b4c:	49 89 c7             	mov    %rax,%r15
    1b4f:	e8 00 00 00 00       	callq  1b54 <monitor_connect_no_hook_time_test+0x44>
    1b54:	48 89 de             	mov    %rbx,%rsi
    1b57:	44 89 e7             	mov    %r12d,%edi
    1b5a:	49 89 c5             	mov    %rax,%r13
    1b5d:	44 89 f2             	mov    %r14d,%edx
    1b60:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1b67 <monitor_connect_no_hook_time_test+0x57>
    1b67:	e8 00 00 00 00       	callq  1b6c <monitor_connect_no_hook_time_test+0x5c>
    1b6c:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1b73 <monitor_connect_no_hook_time_test+0x63>
    1b73:	ba 10 00 00 00       	mov    $0x10,%edx
    1b78:	be 20 80 00 00       	mov    $0x8020,%esi
    1b7d:	49 89 c4             	mov    %rax,%r12
}
    1b80:	e8 00 00 00 00       	callq  1b85 <monitor_connect_no_hook_time_test+0x75>
    int len = sizeof(source_addr);
    1b85:	48 89 c3             	mov    %rax,%rbx
    1b88:	e8 00 00 00 00       	callq  1b8d <monitor_connect_no_hook_time_test+0x7d>
    1b8d:	48 89 c1             	mov    %rax,%rcx
    1b90:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    1b97:	31 c0                	xor    %eax,%eax
    1b99:	4c 29 e9             	sub    %r13,%rcx
    1b9c:	be 10 00 00 00       	mov    $0x10,%esi
    1ba1:	48 89 df             	mov    %rbx,%rdi
    1ba4:	e8 00 00 00 00       	callq  1ba9 <monitor_connect_no_hook_time_test+0x99>
    1ba9:	45 85 ff             	test   %r15d,%r15d
    1bac:	75 07                	jne    1bb5 <monitor_connect_no_hook_time_test+0xa5>
    1bae:	66 83 7d c0 02       	cmpw   $0x2,-0x40(%rbp)
    1bb3:	74 2b                	je     1be0 <monitor_connect_no_hook_time_test+0xd0>
    1bb5:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
}
    1bb9:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
    1bc0:	00 00 
    long ori_connect_syscall_res = 0;
    1bc2:	4c 89 e0             	mov    %r12,%rax
    1bc5:	75 23                	jne    1bea <monitor_connect_no_hook_time_test+0xda>
    1bc7:	48 83 c4 18          	add    $0x18,%rsp
}
    1bcb:	5b                   	pop    %rbx
    long ori_connect_syscall_res = 0;
    1bcc:	41 5c                	pop    %r12
    1bce:	41 5d                	pop    %r13
    1bd0:	41 5e                	pop    %r14
    1bd2:	41 5f                	pop    %r15
    1bd4:	5d                   	pop    %rbp
    1bd5:	c3                   	retq   
    1bd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1bdd:	00 00 00 
    update_use_count();
    1be0:	48 89 df             	mov    %rbx,%rdi
    1be3:	e8 98 e6 ff ff       	callq  280 <send_msg_to_user_memshare.constprop.5>
    if (netlink_pid == -1 && share_mem_flag == -1)
    1be8:	eb cb                	jmp    1bb5 <monitor_connect_no_hook_time_test+0xa5>
    1bea:	e8 00 00 00 00       	callq  1bef <monitor_connect_no_hook_time_test+0xdf>
    1bef:	90                   	nop

0000000000001bf0 <find_sys_call_table>:
    1bf0:	e8 00 00 00 00       	callq  1bf5 <find_sys_call_table+0x5>
    1bf5:	55                   	push   %rbp
    1bf6:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    1bfd:	48 81 fa 00 00 00 00 	cmp    $0x0,%rdx
    1c04:	48 89 e5             	mov    %rsp,%rbp
    1c07:	73 21                	jae    1c2a <find_sys_call_table+0x3a>
    1c09:	48 3b 52 18          	cmp    0x18(%rdx),%rdx
    1c0d:	48 89 d0             	mov    %rdx,%rax

    1c10:	75 0c                	jne    1c1e <find_sys_call_table+0x2e>
    1c12:	eb 18                	jmp    1c2c <find_sys_call_table+0x3c>
    1c14:	0f 1f 40 00          	nopl   0x0(%rax)
    1c18:	48 3b 50 18          	cmp    0x18(%rax),%rdx
    if (netlink_pid == -1 && share_mem_flag == -1)
    1c1c:	74 0e                	je     1c2c <find_sys_call_table+0x3c>
    1c1e:	48 83 c0 08          	add    $0x8,%rax
        return -1;
    }

    1c22:	48 3d 00 00 00 00    	cmp    $0x0,%rax
    class = class_create(THIS_MODULE, CLASS_NAME);
    if (IS_ERR(class))
    {
    1c28:	72 ee                	jb     1c18 <find_sys_call_table+0x28>
    1c2a:	31 c0                	xor    %eax,%eax
    1c2c:	5d                   	pop    %rbp
    1c2d:	c3                   	retq   
    1c2e:	66 90                	xchg   %ax,%ax

0000000000001c30 <init_module>:
    1c30:	e8 00 00 00 00       	callq  1c35 <init_module+0x5>

    1c35:	55                   	push   %rbp
    1c36:	31 f6                	xor    %esi,%esi
    {
    1c38:	31 ff                	xor    %edi,%edi
        unregister_chrdev(major, DEVICE_NAME);
        pr_err("CLASS_CREATE_ERROR");
        return -1;
    }

    1c3a:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8
    1c41:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    1c48:	ba 00 01 00 00       	mov    $0x100,%edx
    1c4d:	48 89 e5             	mov    %rsp,%rbp
        pr_err("CLASS_CREATE_ERROR");
    1c50:	e8 00 00 00 00       	callq  1c55 <init_module+0x25>
    {
    1c55:	85 c0                	test   %eax,%eax
    1c57:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 1c5d <init_module+0x2d>
    device = device_create(class, NULL, MKDEV(major, 0), NULL, DEVICE_NAME);
    if (IS_ERR(device))
    {
        class_destroy(class);
    1c5d:	0f 88 33 04 00 00    	js     2096 <init_module+0x466>
        unregister_chrdev(major, DEVICE_NAME);
        pr_err("DEVICE_CREATE_ERROR");
        return -1;
    1c63:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    1c6a:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    1c71:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    1c78:	e8 00 00 00 00       	callq  1c7d <init_module+0x4d>
    1c7d:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
    1c83:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1c8a <init_module+0x5a>
    {
        device_destroy(class, MKDEV(major, 0));
        class_destroy(class);
        unregister_chrdev(major, DEVICE_NAME);
        pr_err("SHMEM_INIT_ERROR\n");
        return -ENOMEM;
    1c8a:	0f 87 d8 03 00 00    	ja     2068 <init_module+0x438>
    }
    else
    1c90:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 1c96 <init_module+0x66>
    {
        for (i = 0; i < MAX_SIZE; i += PAGE_SIZE)
            SetPageReserved(virt_to_page(((unsigned long)sh_mem) + i));
    }
    mutex_init(&mchar_mutex);
#else
    1c96:	31 c9                	xor    %ecx,%ecx
    1c98:	31 f6                	xor    %esi,%esi
    1c9a:	48 89 c7             	mov    %rax,%rdi
    1c9d:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8
    1ca4:	31 c0                	xor    %eax,%eax
    1ca6:	c1 e2 14             	shl    $0x14,%edx
    1ca9:	e8 00 00 00 00       	callq  1cae <init_module+0x7e>
    struct netlink_kernel_cfg cfg = {
    1cae:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
#else
    1cb4:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1cbb <init_module+0x8b>
    struct netlink_kernel_cfg cfg = {
    1cbb:	0f 87 6d 03 00 00    	ja     202e <init_module+0x3fe>
    };

    nl_sk = netlink_kernel_create(&init_net, NETLINK_USER, &cfg);
    if (!nl_sk)
    {
        if (SEND_TYPE == SHERE_MEM)
    1cc1:	ba 09 00 00 00       	mov    $0x9,%edx
    1cc6:	be d0 80 00 00       	mov    $0x80d0,%esi
    1ccb:	bf 00 00 20 00       	mov    $0x200000,%edi
    1cd0:	e8 00 00 00 00       	callq  1cd5 <init_module+0xa5>
    1cd5:	48 85 c0             	test   %rax,%rax
    1cd8:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1cdf <init_module+0xaf>
        {
    1cdf:	0f 84 fa 02 00 00    	je     1fdf <init_module+0x3af>
        if (SEND_TYPE == SHERE_MEM)
    1ce5:	31 d2                	xor    %edx,%edx
    1ce7:	be 00 00 00 80       	mov    $0x80000000,%esi
        {
    1cec:	48 c7 c7 00 00 00 80 	mov    $0xffffffff80000000,%rdi
    1cf3:	eb 0a                	jmp    1cff <init_module+0xcf>
    1cf5:	0f 1f 00             	nopl   (%rax)
    1cf8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1cff <init_module+0xcf>
    1cff:	48 01 d0             	add    %rdx,%rax
    1d02:	48 8b 0d 00 00 00 00 	mov    0x0(%rip),%rcx        # 1d09 <init_module+0xd9>
            unregister_chrdev(major, DEVICE_NAME);
        }
        pr_err(KERN_ALERT "HIDS_ERROR_CREATING_SOCKET\n");
        return -1;
    }
#endif
    1d09:	48 01 f0             	add    %rsi,%rax
    1d0c:	72 0a                	jb     1d18 <init_module+0xe8>
    1d0e:	48 89 f9             	mov    %rdi,%rcx

    1d11:	48 2b 0d 00 00 00 00 	sub    0x0(%rip),%rcx        # 1d18 <init_module+0xe8>
    1d18:	48 01 c8             	add    %rcx,%rax
    1d1b:	48 c1 e8 0c          	shr    $0xc,%rax
    1d1f:	48 c1 e0 06          	shl    $0x6,%rax
    1d23:	48 03 05 00 00 00 00 	add    0x0(%rip),%rax        # 1d2a <init_module+0xfa>
    1d2a:	f0 80 48 01 04       	lock orb $0x4,0x1(%rax)
            class_destroy(class);
            unregister_chrdev(major, DEVICE_NAME);
        }
        pr_err("GET_SYS_CALL_TABLE_FAILED\n");
        return -1;
    }
    1d2f:	48 81 c2 00 10 00 00 	add    $0x1000,%rdx
    1d36:	48 81 fa 00 00 20 00 	cmp    $0x200000,%rdx
    1d3d:	75 b9                	jne    1cf8 <init_module+0xc8>
    1d3f:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    1d46:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    1d4d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    1d54:	e8 00 00 00 00       	callq  1d59 <init_module+0x129>
    1d59:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    1d60:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
        return -1;
    1d67:	48 39 d1             	cmp    %rdx,%rcx
    1d6a:	76 23                	jbe    1d8f <init_module+0x15f>
    1d6c:	48 3b 52 18          	cmp    0x18(%rdx),%rdx

    kzalloc_init();
    1d70:	48 89 d0             	mov    %rdx,%rax
    1d73:	75 11                	jne    1d86 <init_module+0x156>
    1d75:	eb 79                	jmp    1df0 <init_module+0x1c0>
    1d77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    1d7e:	00 00 
    1d80:	48 3b 50 18          	cmp    0x18(%rax),%rdx
    1d84:	74 6a                	je     1df0 <init_module+0x1c0>
    1d86:	48 83 c0 08          	add    $0x8,%rax
    {
    1d8a:	48 39 c1             	cmp    %rax,%rcx
    1d8d:	77 f1                	ja     1d80 <init_module+0x150>
    1d8f:	48 c7 05 00 00 00 00 	movq   $0x0,0x0(%rip)        # 1d9a <init_module+0x16a>
    1d96:	00 00 00 00 
    1d9a:	8b 35 00 00 00 00    	mov    0x0(%rip),%esi        # 1da0 <init_module+0x170>
    }
    1da0:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1da7 <init_module+0x177>

    1da7:	c1 e6 14             	shl    $0x14,%esi
    1daa:	e8 00 00 00 00       	callq  1daf <init_module+0x17f>
    1daf:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1db6 <init_module+0x186>
        pr_err("CLASS_CREATE_ERROR");
    1db6:	e8 00 00 00 00       	callq  1dbb <init_module+0x18b>
    {
    1dbb:	8b 3d 00 00 00 00    	mov    0x0(%rip),%edi        # 1dc1 <init_module+0x191>
        pr_err("UNKONW_SYMBOL_GETNAME\n");
        return -1;
    }

    for (i = 0; i < NR_syscalls - 1; i++)
        orig_sys_call_table[i] = sys_call_table_ptr[i];
    1dc1:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    1dc8:	ba 00 01 00 00       	mov    $0x100,%edx
    disable_write_protection();
    orig_connect = (void *)(sys_call_table_ptr[__NR_connect]);

#if (CONNECT_TIME_TEST == 1)
    1dcd:	31 f6                	xor    %esi,%esi
    1dcf:	e8 00 00 00 00       	callq  1dd4 <init_module+0x1a4>
    1dd4:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    1ddb:	31 c0                	xor    %eax,%eax
    1ddd:	e8 00 00 00 00       	callq  1de2 <init_module+0x1b2>
    sys_call_table_ptr[__NR_connect] = (void *)monitor_connect_no_hook_time_test;
    1de2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1de7:	5d                   	pop    %rbp
    1de8:	c3                   	retq   
    1de9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1df0:	48 85 c0             	test   %rax,%rax
    1df3:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1dfa <init_module+0x1ca>
    1dfa:	74 9e                	je     1d9a <init_module+0x16a>
    1dfc:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1e03 <init_module+0x1d3>
    1e03:	ba 00 01 00 00       	mov    $0x100,%edx
#else
    sys_call_table_ptr[__NR_connect] = (void *)monitor_connect_hook;
#endif
    1e08:	be 20 80 00 00       	mov    $0x8020,%esi
    1e0d:	e8 00 00 00 00       	callq  1e12 <init_module+0x1e2>

    1e12:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1e19 <init_module+0x1e9>
module_init(lkm_init);
module_exit(lkm_exit);

MODULE_LICENSE("GPL v2");
MODULE_VERSION("0.1.4");
MODULE_AUTHOR("E_Bwill <cy_sniper@yeah.net>");
    1e19:	ba 64 00 00 00       	mov    $0x64,%edx
    1e1e:	be 20 80 00 00       	mov    $0x8020,%esi
        orig_sys_call_table[i] = sys_call_table_ptr[i];
    1e23:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1e2a <init_module+0x1fa>
    1e2a:	e8 00 00 00 00       	callq  1e2f <init_module+0x1ff>
    1e2f:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1e36 <init_module+0x206>
    1e36:	ba 64 00 00 00       	mov    $0x64,%edx
    1e3b:	be 20 80 00 00       	mov    $0x8020,%esi
    1e40:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1e47 <init_module+0x217>
    1e47:	e8 00 00 00 00       	callq  1e4c <init_module+0x21c>
    1e4c:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1e53 <init_module+0x223>
    init_module_buf = kzalloc(100 * sizeof(char), GFP_ATOMIC);
    1e53:	ba 00 10 00 00       	mov    $0x1000,%edx
    1e58:	be 20 80 00 00       	mov    $0x8020,%esi
    1e5d:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1e64 <init_module+0x234>
    1e64:	e8 00 00 00 00       	callq  1e69 <init_module+0x239>
    1e69:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1e70 <init_module+0x240>
    pathname = kzalloc(PATH_MAX, GFP_ATOMIC);
    1e70:	ba 08 00 00 00       	mov    $0x8,%edx
    1e75:	be 20 80 00 00       	mov    $0x8020,%esi
    1e7a:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1e81 <init_module+0x251>
    1e81:	e8 00 00 00 00       	callq  1e86 <init_module+0x256>
    1e86:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1e8d <init_module+0x25d>
    slot_len = kzalloc(8, GFP_ATOMIC);
    1e8d:	ba 08 00 00 00       	mov    $0x8,%edx
    1e92:	be 20 80 00 00       	mov    $0x8020,%esi
    1e97:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1e9e <init_module+0x26e>
    1e9e:	e8 00 00 00 00       	callq  1ea3 <init_module+0x273>
    1ea3:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    list_head_char = kzalloc(8, GFP_ATOMIC);
    1eaa:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1eb1 <init_module+0x281>
    1eb1:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
    1eb8:	00 00 00 
    1ebb:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1ec2 <init_module+0x292>
    1ec2:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1ec9 <init_module+0x299>
}
    1ec9:	e8 00 00 00 00       	callq  1ece <init_module+0x29e>
    1ece:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    sys_call_table_ptr[__NR_init_module] = (void *)monitor_init_module_hook;
    1ed5:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1edc <init_module+0x2ac>

    1edc:	e8 00 00 00 00       	callq  1ee1 <init_module+0x2b1>
}
    1ee1:	48 83 3d 00 00 00 00 	cmpq   $0x0,0x0(%rip)        # 1ee9 <init_module+0x2b9>
    1ee8:	00 
    1ee9:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 1ef0 <init_module+0x2c0>
    1ef0:	0f 84 9a 00 00 00    	je     1f90 <init_module+0x360>

    1ef6:	48 8b 0d 00 00 00 00 	mov    0x0(%rip),%rcx        # 1efd <init_module+0x2cd>
    sys_call_table_ptr[__NR_init_module] = (void *)monitor_init_module_hook;
    1efd:	31 c0                	xor    %eax,%eax

    1eff:	90                   	nop
    1f00:	48 8b 14 01          	mov    (%rcx,%rax,1),%rdx
    1f04:	48 89 90 00 00 00 00 	mov    %rdx,0x0(%rax)
    sys_call_table_ptr[__NR_init_module] = (void *)monitor_init_module_hook;
    1f0b:	48 83 c0 08          	add    $0x8,%rax

    1f0f:	48 3d 58 0a 00 00    	cmp    $0xa58,%rax
    sys_call_table_ptr[__NR_execve] = (void *)monitor_stub_execve_hook;
    1f15:	75 e9                	jne    1f00 <init_module+0x2d0>
    1f17:	e8 34 e1 ff ff       	callq  50 <disable_write_protection>

    1f1c:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1f23 <init_module+0x2f3>
    sys_call_table_ptr[__NR_execve] = (void *)monitor_stub_execve_hook;
    1f23:	48 8b 90 50 01 00 00 	mov    0x150(%rax),%rdx
    1f2a:	48 c7 80 50 01 00 00 	movq   $0x0,0x150(%rax)
    1f31:	00 00 00 00 
    netlink_kernel_release(nl_sk);
    1f35:	48 89 15 00 00 00 00 	mov    %rdx,0x0(%rip)        # 1f3c <init_module+0x30c>
    1f3c:	48 8b 90 c8 09 00 00 	mov    0x9c8(%rax),%rdx
{
    1f43:	48 c7 80 c8 09 00 00 	movq   $0x0,0x9c8(%rax)
    1f4a:	00 00 00 00 
    sys_call_table_ptr[__NR_connect] = (void *)orig_connect;
    1f4e:	48 89 15 00 00 00 00 	mov    %rdx,0x0(%rip)        # 1f55 <init_module+0x325>
    1f55:	48 8b 90 78 05 00 00 	mov    0x578(%rax),%rdx
    sys_call_table_ptr[__NR_execve] = (void *)orig_stub_execve;
    1f5c:	48 c7 80 78 05 00 00 	movq   $0x0,0x578(%rax)
    1f63:	00 00 00 00 
    sys_call_table_ptr[__NR_connect] = (void *)orig_connect;
    1f67:	48 89 15 00 00 00 00 	mov    %rdx,0x0(%rip)        # 1f6e <init_module+0x33e>
    enable_write_protection();
    1f6e:	48 8b 90 d8 01 00 00 	mov    0x1d8(%rax),%rdx

    1f75:	48 c7 80 d8 01 00 00 	movq   $0x0,0x1d8(%rax)
    1f7c:	00 00 00 00 
    enable_write_protection();
    1f80:	48 89 15 00 00 00 00 	mov    %rdx,0x0(%rip)        # 1f87 <init_module+0x357>
    device_destroy(class, MKDEV(major, 0));
    1f87:	e8 74 e0 ff ff       	callq  0 <enable_write_protection>
    class_unregister(class);
    1f8c:	31 c0                	xor    %eax,%eax
    1f8e:	5d                   	pop    %rbp
    1f8f:	c3                   	retq   
    1f90:	8b 35 00 00 00 00    	mov    0x0(%rip),%esi        # 1f96 <init_module+0x366>
    1f96:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1f9d <init_module+0x36d>
    device_destroy(class, MKDEV(major, 0));
    1f9d:	c1 e6 14             	shl    $0x14,%esi
    unregister_chrdev(major, DEVICE_NAME);
    1fa0:	e8 00 00 00 00       	callq  1fa5 <init_module+0x375>
#endif
    1fa5:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1fac <init_module+0x37c>
    1fac:	e8 00 00 00 00       	callq  1fb1 <init_module+0x381>
    unregister_chrdev(major, DEVICE_NAME);
    1fb1:	8b 3d 00 00 00 00    	mov    0x0(%rip),%edi        # 1fb7 <init_module+0x387>
}
    1fb7:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
MODULE_AUTHOR("E_Bwill <cy_sniper@yeah.net>");
    1fbe:	ba 00 01 00 00       	mov    $0x100,%edx
#if (EXIT_PROTECT == 1)
    1fc3:	31 f6                	xor    %esi,%esi
    1fc5:	e8 00 00 00 00       	callq  1fca <init_module+0x39a>
    1fca:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    1fd1:	31 c0                	xor    %eax,%eax
    1fd3:	e8 00 00 00 00       	callq  1fd8 <init_module+0x3a8>
    exit_protect_action()
    1fd8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1fdd:	5d                   	pop    %rbp
    1fde:	c3                   	retq   
    1fdf:	8b 35 00 00 00 00    	mov    0x0(%rip),%esi        # 1fe5 <init_module+0x3b5>
    1fe5:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1fec <init_module+0x3bc>
    1fec:	c1 e6 14             	shl    $0x14,%esi
    1fef:	e8 00 00 00 00       	callq  1ff4 <init_module+0x3c4>
    1ff4:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1ffb <init_module+0x3cb>
        return 0;
    1ffb:	e8 00 00 00 00       	callq  2000 <init_module+0x3d0>
    2000:	8b 3d 00 00 00 00    	mov    0x0(%rip),%edi        # 2006 <init_module+0x3d6>
    2006:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
MODULE_AUTHOR("E_Bwill <cy_sniper@yeah.net>");
    200d:	ba 00 01 00 00       	mov    $0x100,%edx
    {
    2012:	31 f6                	xor    %esi,%esi
    2014:	e8 00 00 00 00       	callq  2019 <init_module+0x3e9>
    2019:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    2020:	31 c0                	xor    %eax,%eax
    2022:	e8 00 00 00 00       	callq  2027 <init_module+0x3f7>
        if (SEND_TYPE == SHERE_MEM)
    2027:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
    202c:	5d                   	pop    %rbp
    202d:	c3                   	retq   
    202e:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 2035 <init_module+0x405>
    2035:	e8 00 00 00 00       	callq  203a <init_module+0x40a>
    203a:	8b 3d 00 00 00 00    	mov    0x0(%rip),%edi        # 2040 <init_module+0x410>
    2040:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    2047:	ba 00 01 00 00       	mov    $0x100,%edx
            device_destroy(class, MKDEV(major, 0));
    204c:	31 f6                	xor    %esi,%esi
    204e:	e8 00 00 00 00       	callq  2053 <init_module+0x423>
    2053:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
            class_destroy(class);
    205a:	31 c0                	xor    %eax,%eax
MODULE_AUTHOR("E_Bwill <cy_sniper@yeah.net>");
    205c:	e8 00 00 00 00       	callq  2061 <init_module+0x431>
            class_destroy(class);
    2061:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    2066:	5d                   	pop    %rbp
    2067:	c3                   	retq   
    2068:	8b 3d 00 00 00 00    	mov    0x0(%rip),%edi        # 206e <init_module+0x43e>
    206e:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    2075:	ba 00 01 00 00       	mov    $0x100,%edx
    207a:	31 f6                	xor    %esi,%esi
    207c:	e8 00 00 00 00       	callq  2081 <init_module+0x451>
    2081:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
        }
    2088:	31 c0                	xor    %eax,%eax
    208a:	e8 00 00 00 00       	callq  208f <init_module+0x45f>
    208f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
        pr_err(KERN_ALERT "HIDS_ERROR_CREATING_SOCKET\n");
    2094:	5d                   	pop    %rbp
    2095:	c3                   	retq   
MODULE_AUTHOR("E_Bwill <cy_sniper@yeah.net>");
    2096:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    209d:	31 c0                	xor    %eax,%eax
    209f:	e8 00 00 00 00       	callq  20a4 <init_module+0x474>
    20a4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    20a9:	5d                   	pop    %rbp
    20aa:	c3                   	retq   
    20ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000020b0 <cleanup_module>:
    20b0:	e8 00 00 00 00       	callq  20b5 <cleanup_module+0x5>

    20b5:	55                   	push   %rbp
    20b6:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 20bd <cleanup_module+0xd>
    20bd:	48 89 e5             	mov    %rsp,%rbp
    nl_sk = netlink_kernel_create(&init_net, NETLINK_USER, &cfg);
    20c0:	e8 00 00 00 00       	callq  20c5 <cleanup_module+0x15>
MODULE_AUTHOR("E_Bwill <cy_sniper@yeah.net>");
    20c5:	e8 86 df ff ff       	callq  50 <disable_write_protection>
        for (i = 0; i < MAX_SIZE; i += PAGE_SIZE)
    20ca:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 20d1 <cleanup_module+0x21>
    20d1:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 20d8 <cleanup_module+0x28>
            SetPageReserved(virt_to_page(((unsigned long)sh_mem) + i));
    20d8:	48 c7 05 00 00 00 00 	movq   $0x0,0x0(%rip)        # 20e3 <cleanup_module+0x33>
    20df:	00 00 00 00 
    20e3:	48 89 90 50 01 00 00 	mov    %rdx,0x150(%rax)
    20ea:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 20f1 <cleanup_module+0x41>
    20f1:	48 89 90 c8 09 00 00 	mov    %rdx,0x9c8(%rax)
    20f8:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 20ff <cleanup_module+0x4f>
    20ff:	48 89 90 78 05 00 00 	mov    %rdx,0x578(%rax)
    2106:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 210d <cleanup_module+0x5d>
    210d:	48 89 90 d8 01 00 00 	mov    %rdx,0x1d8(%rax)
    2114:	e8 e7 de ff ff       	callq  0 <enable_write_protection>
    2119:	8b 35 00 00 00 00    	mov    0x0(%rip),%esi        # 211f <cleanup_module+0x6f>
    211f:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 2126 <cleanup_module+0x76>
    2126:	c1 e6 14             	shl    $0x14,%esi
    2129:	e8 00 00 00 00       	callq  212e <cleanup_module+0x7e>
    212e:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 2135 <cleanup_module+0x85>
    2135:	e8 00 00 00 00       	callq  213a <cleanup_module+0x8a>
    213a:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 2141 <cleanup_module+0x91>
    2141:	e8 00 00 00 00       	callq  2146 <cleanup_module+0x96>
    2146:	8b 3d 00 00 00 00    	mov    0x0(%rip),%edi        # 214c <cleanup_module+0x9c>
    214c:	31 f6                	xor    %esi,%esi
    214e:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    2155:	ba 00 01 00 00       	mov    $0x100,%edx
    215a:	e8 00 00 00 00       	callq  215f <cleanup_module+0xaf>
    215f:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 2166 <cleanup_module+0xb6>
    2166:	48 85 ff             	test   %rdi,%rdi
    2169:	74 05                	je     2170 <cleanup_module+0xc0>
    216b:	e8 00 00 00 00       	callq  2170 <cleanup_module+0xc0>
    2170:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 2177 <cleanup_module+0xc7>
    2177:	48 85 ff             	test   %rdi,%rdi
    217a:	74 05                	je     2181 <cleanup_module+0xd1>
    217c:	e8 00 00 00 00       	callq  2181 <cleanup_module+0xd1>
    2181:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 2188 <cleanup_module+0xd8>
    2188:	48 85 ff             	test   %rdi,%rdi
    218b:	74 05                	je     2192 <cleanup_module+0xe2>
    218d:	e8 00 00 00 00       	callq  2192 <cleanup_module+0xe2>

    2192:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 2199 <cleanup_module+0xe9>
    2199:	48 85 ff             	test   %rdi,%rdi
    if (init_module_buf)
    219c:	74 05                	je     21a3 <cleanup_module+0xf3>
    219e:	e8 00 00 00 00       	callq  21a3 <cleanup_module+0xf3>

    21a3:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 21aa <cleanup_module+0xfa>
    21aa:	48 85 ff             	test   %rdi,%rdi
    if (pathname)
    21ad:	74 05                	je     21b4 <cleanup_module+0x104>
    21af:	e8 00 00 00 00       	callq  21b4 <cleanup_module+0x104>

    21b4:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 21bb <cleanup_module+0x10b>
    21bb:	48 85 ff             	test   %rdi,%rdi
    if (slot_len)
    21be:	74 56                	je     2216 <cleanup_module+0x166>
    21c0:	31 d2                	xor    %edx,%edx

    21c2:	be 00 00 00 80       	mov    $0x80000000,%esi
    21c7:	49 c7 c0 00 00 00 80 	mov    $0xffffffff80000000,%r8
#if (SEND_TYPE == SHERE_MEM)
    21ce:	66 90                	xchg   %ax,%ax
    21d0:	48 8d 04 17          	lea    (%rdi,%rdx,1),%rax
    {
    21d4:	48 8b 0d 00 00 00 00 	mov    0x0(%rip),%rcx        # 21db <cleanup_module+0x12b>
    21db:	48 01 f0             	add    %rsi,%rax
    21de:	72 0a                	jb     21ea <cleanup_module+0x13a>
        for (i = 0; i < MAX_SIZE; i += PAGE_SIZE)
    21e0:	4c 89 c1             	mov    %r8,%rcx
    21e3:	48 2b 0d 00 00 00 00 	sub    0x0(%rip),%rcx        # 21ea <cleanup_module+0x13a>
    }
    21ea:	48 01 c8             	add    %rcx,%rax
    21ed:	48 c1 e8 0c          	shr    $0xc,%rax
    21f1:	48 c1 e0 06          	shl    $0x6,%rax
    21f5:	48 03 05 00 00 00 00 	add    0x0(%rip),%rax        # 21fc <cleanup_module+0x14c>
    21fc:	f0 80 60 01 fb       	lock andb $0xfb,0x1(%rax)
    if (list_head_char)
    2201:	48 81 c2 00 10 00 00 	add    $0x1000,%rdx
    2208:	48 81 fa 00 00 20 00 	cmp    $0x200000,%rdx
    220f:	75 bf                	jne    21d0 <cleanup_module+0x120>
    2211:	e8 00 00 00 00       	callq  2216 <cleanup_module+0x166>
    2216:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 221d <cleanup_module+0x16d>
    221d:	48 85 ff             	test   %rdi,%rdi
    2220:	74 05                	je     2227 <cleanup_module+0x177>
    2222:	e8 00 00 00 00       	callq  2227 <cleanup_module+0x177>
    2227:	5d                   	pop    %rbp
    2228:	c3                   	retq   

0000000000002229 <monitor_stub_execve_hook>:
    2229:	53                   	push   %rbx
    222a:	57                   	push   %rdi
    222b:	56                   	push   %rsi
    222c:	52                   	push   %rdx
    222d:	51                   	push   %rcx
    222e:	41 50                	push   %r8
    2230:	41 51                	push   %r9
    2232:	41 52                	push   %r10
    2234:	41 53                	push   %r11
    2236:	e8 00 00 00 00       	callq  223b <monitor_stub_execve_hook+0x12>

    223b:	41 5b                	pop    %r11
    223d:	41 5a                	pop    %r10
    223f:	41 59                	pop    %r9
        kfree(list_head_char);
    2241:	41 58                	pop    %r8
    2243:	59                   	pop    %rcx
    2244:	5a                   	pop    %rdx
    2245:	5e                   	pop    %rsi
{
    2246:	5f                   	pop    %rdi
    2247:	5b                   	pop    %rbx
    2248:	48 b8 3b 00 00 00 00 	movabs $0x3b,%rax
    224f:	00 00 00 
    char *result, *ins, *tmp;
    2252:	ff 24 c5 00 00 00 00 	jmpq   *0x0(,%rax,8)
